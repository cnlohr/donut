GAS LISTING /tmp/ccqyO3R8.s 			page 1


   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 110               		.section	.text.startup,"ax",@progbits
 112               	.global	main
 114               	main:
 115               		.stabd	46,0,0
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** #include <avr/pgmspace.h>
   5:main.c        **** #include "util.h"
   6:main.c        **** 
   7:main.c        **** 
   8:main.c        **** register int8_t wave asm("r2");
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** int main()
  12:main.c        **** {
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
  13:main.c        **** 	CLKPR=0x80;
 124               	.LM1:
 125 0000 80E8      		ldi r24,lo8(-128)
 126 0002 8093 6100 		sts 97,r24
  14:main.c        **** 	CLKPR=0x01;
 128               	.LM2:
 129 0006 81E0      		ldi r24,lo8(1)
 130 0008 8093 6100 		sts 97,r24
  15:main.c        **** 
  16:main.c        **** 	//Set outputs to be: Speaker and TX light.
  17:main.c        **** 	DDRD = (_BV(3) | _BV(5) | _BV(6) | _BV(1) );
 132               	.LM3:
 133 000c 9AE6      		ldi r25,lo8(106)
 134 000e 9AB9      		out 0xa,r25
  18:main.c        **** 	DDRB = _BV(3);
 136               	.LM4:
 137 0010 98E0      		ldi r25,lo8(8)
 138 0012 94B9      		out 0x4,r25
  19:main.c        **** 
  20:main.c        **** 	voiceptr = &voiceQuicklySleep;
 140               	.LM5:
 141 0014 20E0      		ldi r18,lo8(gs(voiceQuicklySleep))
 142 0016 30E0      		ldi r19,hi8(gs(voiceQuicklySleep))
 143 0018 3093 0000 		sts voiceptr+1,r19
 144 001c 2093 0000 		sts voiceptr,r18
  21:main.c        **** 
  22:main.c        **** //_BV(COM0A1) |
GAS LISTING /tmp/ccqyO3R8.s 			page 2


  23:main.c        **** //_BV(COM0B1) | 
  24:main.c        **** 	TCCR0A = _BV(COM0B1) | _BV(COM0A1) | _BV(WGM01) | _BV(WGM00); //Phase correct PWM on TCCR0A, Clear
 146               	.LM6:
 147 0020 93EA      		ldi r25,lo8(-93)
 148 0022 94BD      		out 0x24,r25
  25:main.c        **** 	TCCR0B = _BV(CS00);
 150               	.LM7:
 151 0024 85BD      		out 0x25,r24
  26:main.c        **** 	TIMSK0 |= _BV(TOIE0);// | _BV(OCIE0A);
 153               	.LM8:
 154 0026 8091 6E00 		lds r24,110
 155 002a 8160      		ori r24,lo8(1)
 156 002c 8093 6E00 		sts 110,r24
  27:main.c        **** 	OCR0A = OCR0B = 255;
 158               	.LM9:
 159 0030 8FEF      		ldi r24,lo8(-1)
 160 0032 88BD      		out 0x28,r24
 161 0034 87BD      		out 0x27,r24
  28:main.c        **** 	//DDRD &= ~_BV(5);
  29:main.c        **** 	//DDRD |= _BV(6);
  30:main.c        **** 	//DDRD &= ~_BV(6);
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** 
  34:main.c        **** 	PORTB |= _BV(0) | _BV(1) | _BV(4) | _BV(5);
 163               	.LM10:
 164 0036 85B1      		in r24,0x5
 165 0038 8363      		ori r24,lo8(51)
 166 003a 85B9      		out 0x5,r24
  35:main.c        **** 	PORTC |= 0x3f;
 168               	.LM11:
 169 003c 88B1      		in r24,0x8
 170 003e 8F63      		ori r24,lo8(63)
 171 0040 88B9      		out 0x8,r24
  36:main.c        **** 	PORTD |= _BV(0) | _BV(2) | _BV(4) | _BV(7);
 173               	.LM12:
 174 0042 8BB1      		in r24,0xb
 175 0044 8569      		ori r24,lo8(-107)
 176 0046 8BB9      		out 0xb,r24
  37:main.c        **** 	PORTE |= _BV(3) | _BV(2) | _BV(1);
 178               	.LM13:
 179 0048 8EB1      		in r24,0xe
 180 004a 8E60      		ori r24,lo8(14)
 181 004c 8EB9      		out 0xe,r24
  38:main.c        **** 
  39:main.c        **** 	sei();
 183               	.LM14:
 184               	/* #APP */
 185               	 ;  39 "main.c" 1
 186 004e 7894      		sei
 187               	 ;  0 "" 2
  40:main.c        **** 
  41:main.c        **** 	mode_button = 0;
 189               	.LM15:
 190               	/* #NOAPP */
 191 0050 1092 0000 		sts mode_button,__zero_reg__
  42:main.c        **** 	mode = 3;
GAS LISTING /tmp/ccqyO3R8.s 			page 3


 193               	.LM16:
 194 0054 83E0      		ldi r24,lo8(3)
 195 0056 8093 0000 		sts mode,r24
 196               	.LBB2:
 197               	.LBB3:
  43:main.c        **** 
  44:main.c        **** 	while(1)
  45:main.c        **** 	{
  46:main.c        **** 		uint8_t ts = 0;
  47:main.c        **** 		uint8_t ts1 = 0;
  48:main.c        **** 
  49:main.c        **** 		uint8_t i;
  50:main.c        **** 		uint16_t checkmask = 1;
  51:main.c        **** 
  52:main.c        **** 		if( MENUBUTTONDOWN )
  53:main.c        **** 		{
  54:main.c        **** 		 mode_button = 1;
  55:main.c        **** 		}
  56:main.c        **** 		else
  57:main.c        **** 		{
  58:main.c        **** 			uint16_t mask = ReadButtonMask();
  59:main.c        **** 
  60:main.c        **** 			for( i = 0; i < 16; i++ )
  61:main.c        **** 			{
  62:main.c        **** 				if( mask & checkmask ) {
  63:main.c        **** 					if( ts ) 
  64:main.c        **** 						ts1 = i+1;
  65:main.c        **** 					else
  66:main.c        **** 						ts = i+1;
  67:main.c        **** 				}
  68:main.c        **** 				checkmask<<=1;
  69:main.c        **** 			}
  70:main.c        **** 
  71:main.c        **** 			#define BASENOTE 0
  72:main.c        **** 
  73:main.c        **** 			if ( mode_button != 0) {
  74:main.c        **** 			  mode_button = 0;
  75:main.c        **** 
  76:main.c        **** 			  voiceptr = voiceQuicklySleep;
  77:main.c        **** 			  speed = 0;
  78:main.c        **** 			  PORTD |= _BV(1);
  79:main.c        **** 			  mode = ts;
  80:main.c        **** 			}
  81:main.c        **** 			else if( ts != 0 )
  82:main.c        **** 			{
  83:main.c        **** 			  switch (mode) {
  84:main.c        **** 			  case 0:
  85:main.c        **** 			  case 1:
  86:main.c        **** 			  case 2:
  87:main.c        **** 			  case 3:
  88:main.c        **** 			  case 4:
  89:main.c        **** 			  case 5:
  90:main.c        **** 			    volume = 100;
  91:main.c        **** 			    volume1 = 100;
  92:main.c        **** 
  93:main.c        **** 			    speed = freq_s[ts-1+BASENOTE+12*mode];
  94:main.c        **** 			    speed_rec = freq_rs[ts-1+BASENOTE+12*mode];
GAS LISTING /tmp/ccqyO3R8.s 			page 4


  95:main.c        **** 			    if( ts1 )
  96:main.c        **** 			    {
  97:main.c        **** 				//2 notes.
  98:main.c        **** 				speed1 = freq_s[ts1-1+BASENOTE+12*mode];
  99:main.c        **** 				speed_rec1 = freq_rs[ts1-1+BASENOTE+12*mode];
 100:main.c        **** 			    }
 101:main.c        **** 			    else
 102:main.c        **** 			    {
 103:main.c        **** 				//1 note
 104:main.c        **** 				speed1 = 0;
 105:main.c        **** 			    }
 106:main.c        **** 			    voiceptr = &voiceDoBasicSynth;
 107:main.c        **** 			    PORTD &=~_BV(1); //LED
 108:main.c        **** 			    break;
 109:main.c        **** 			  case 6:
 110:main.c        **** 			    volume = 10*ts;
 111:main.c        **** 			    speed = ts;
 112:main.c        **** 			    voiceptr = &voiceNoise;
 113:main.c        **** 			    PORTD &=~_BV(1); //LED
 114:main.c        **** 			    break;
 115:main.c        **** 			  }
 116:main.c        **** 			}
 117:main.c        **** 			else
 118:main.c        **** 			{
 119:main.c        **** 				//No notes
 120:main.c        **** 				voiceptr = voiceQuicklySleep;
 199               	.LM17:
 200 005a 7901      		movw r14,r18
  90:main.c        **** 			    volume1 = 100;
 202               	.LM18:
 203 005c 44E6      		ldi r20,lo8(100)
 204 005e C42E      		mov r12,r20
  93:main.c        **** 			    speed_rec = freq_rs[ts-1+BASENOTE+12*mode];
 206               	.LM19:
 207 0060 5CE0      		ldi r21,lo8(12)
 208 0062 D52E      		mov r13,r21
 106:main.c        **** 			    PORTD &=~_BV(1); //LED
 210               	.LM20:
 211 0064 C0E0      		ldi r28,lo8(gs(voiceDoBasicSynth))
 212 0066 D0E0      		ldi r29,hi8(gs(voiceDoBasicSynth))
 110:main.c        **** 			    speed = ts;
 214               	.LM21:
 215 0068 6AE0      		ldi r22,lo8(10)
 216 006a B62E      		mov r11,r22
 112:main.c        **** 			    PORTD &=~_BV(1); //LED
 218               	.LM22:
 219 006c 00E0      		ldi r16,lo8(gs(voiceNoise))
 220 006e 10E0      		ldi r17,hi8(gs(voiceNoise))
 221               	.LBE3:
  54:main.c        **** 		}
 223               	.LM23:
 224 0070 AA24      		clr r10
 225 0072 A394      		inc r10
 226               	.L2:
  52:main.c        **** 		{
 228               	.LM24:
 229 0074 1D99      		sbic 0x3,5
GAS LISTING /tmp/ccqyO3R8.s 			page 5


 230 0076 00C0      		rjmp .L4
  54:main.c        **** 		}
 232               	.LM25:
 233 0078 A092 0000 		sts mode_button,r10
 234 007c 00C0      		rjmp .L2
 235               	.L4:
 236               	.LBB4:
  58:main.c        **** 
 238               	.LM26:
 239 007e 0E94 0000 		call ReadButtonMask
 240 0082 BC01      		movw r22,r24
 241               	.LBE4:
  50:main.c        **** 
 243               	.LM27:
 244 0084 41E0      		ldi r20,lo8(1)
 245 0086 50E0      		ldi r21,0
 246               	.LBB5:
  60:main.c        **** 			{
 248               	.LM28:
 249 0088 80E0      		ldi r24,0
 250               	.LBE5:
  47:main.c        **** 
 252               	.LM29:
 253 008a 20E0      		ldi r18,0
  46:main.c        **** 		uint8_t ts1 = 0;
 255               	.LM30:
 256 008c 90E0      		ldi r25,0
 257               	.L6:
 258 008e 8F5F      		subi r24,lo8(-(1))
 259               	.LBB6:
  62:main.c        **** 					if( ts ) 
 261               	.LM31:
 262 0090 FB01      		movw r30,r22
 263 0092 E423      		and r30,r20
 264 0094 F523      		and r31,r21
 265 0096 EF2B      		or r30,r31
 266 0098 01F0      		breq .L5
  63:main.c        **** 						ts1 = i+1;
 268               	.LM32:
 269 009a 9923      		tst r25
 270 009c 01F0      		breq .L13
 271 009e 282F      		mov r18,r24
 272               	.L5:
  68:main.c        **** 			}
 274               	.LM33:
 275 00a0 440F      		lsl r20
 276 00a2 551F      		rol r21
  60:main.c        **** 			{
 278               	.LM34:
 279 00a4 8031      		cpi r24,lo8(16)
 280 00a6 01F4      		brne .L6
  73:main.c        **** 			  mode_button = 0;
 282               	.LM35:
 283 00a8 8091 0000 		lds r24,mode_button
 284 00ac 8823      		tst r24
 285 00ae 01F0      		breq .L7
  74:main.c        **** 
GAS LISTING /tmp/ccqyO3R8.s 			page 6


 287               	.LM36:
 288 00b0 1092 0000 		sts mode_button,__zero_reg__
  76:main.c        **** 			  speed = 0;
 290               	.LM37:
 291 00b4 F092 0000 		sts voiceptr+1,r15
 292 00b8 E092 0000 		sts voiceptr,r14
  77:main.c        **** 			  PORTD |= _BV(1);
 294               	.LM38:
 295 00bc 1092 0000 		sts speed,__zero_reg__
  78:main.c        **** 			  mode = ts;
 297               	.LM39:
 298 00c0 599A      		sbi 0xb,1
  79:main.c        **** 			}
 300               	.LM40:
 301 00c2 9093 0000 		sts mode,r25
 302 00c6 00C0      		rjmp .L2
 303               	.L13:
 304 00c8 982F      		mov r25,r24
 305 00ca 00C0      		rjmp .L5
 306               	.L7:
  81:main.c        **** 			{
 308               	.LM41:
 309 00cc 9923      		tst r25
 310 00ce 01F4      		brne .+2
 311 00d0 00C0      		rjmp .L8
  83:main.c        **** 			  case 0:
 313               	.LM42:
 314 00d2 8091 0000 		lds r24,mode
 315 00d6 8630      		cpi r24,lo8(6)
 316 00d8 00F0      		brlo .L9
 317 00da 8630      		cpi r24,lo8(6)
 318 00dc 01F4      		brne .L2
 110:main.c        **** 			    speed = ts;
 320               	.LM43:
 321 00de 9B9D      		mul r25,r11
 322 00e0 802D      		mov r24,r0
 323 00e2 1124      		clr r1
 324 00e4 8093 0000 		sts volume,r24
 111:main.c        **** 			    voiceptr = &voiceNoise;
 326               	.LM44:
 327 00e8 9093 0000 		sts speed,r25
 112:main.c        **** 			    PORTD &=~_BV(1); //LED
 329               	.LM45:
 330 00ec 1093 0000 		sts voiceptr+1,r17
 331 00f0 0093 0000 		sts voiceptr,r16
 332 00f4 00C0      		rjmp .L18
 333               	.L9:
  90:main.c        **** 			    volume1 = 100;
 335               	.LM46:
 336 00f6 C092 0000 		sts volume,r12
  91:main.c        **** 
 338               	.LM47:
 339 00fa C092 0000 		sts volume1,r12
  93:main.c        **** 			    speed_rec = freq_rs[ts-1+BASENOTE+12*mode];
 341               	.LM48:
 342 00fe 492F      		mov r20,r25
 343 0100 4150      		subi r20,1
GAS LISTING /tmp/ccqyO3R8.s 			page 7


 344 0102 550B      		sbc r21,r21
 345 0104 CA01      		movw r24,r20
 346 0106 3091 0000 		lds r19,mode
 347 010a FA01      		movw r30,r20
 348 010c E050      		subi r30,lo8(-(freq_s))
 349 010e F040      		sbci r31,hi8(-(freq_s))
 350 0110 3D9D      		mul r19,r13
 351 0112 E00D      		add r30,r0
 352 0114 F11D      		adc r31,r1
 353 0116 1124      		clr __zero_reg__
 354 0118 3081      		ld r19,Z
 355 011a 3093 0000 		sts speed,r19
  94:main.c        **** 			    if( ts1 )
 357               	.LM49:
 358 011e 3091 0000 		lds r19,mode
 359 0122 8050      		subi r24,lo8(-(freq_rs))
 360 0124 9040      		sbci r25,hi8(-(freq_rs))
 361 0126 FC01      		movw r30,r24
 362 0128 3D9D      		mul r19,r13
 363 012a E00D      		add r30,r0
 364 012c F11D      		adc r31,r1
 365 012e 1124      		clr __zero_reg__
 366 0130 8081      		ld r24,Z
 367 0132 8093 0000 		sts speed_rec,r24
  95:main.c        **** 			    {
 369               	.LM50:
 370 0136 2223      		tst r18
 371 0138 01F0      		breq .L11
  98:main.c        **** 				speed_rec1 = freq_rs[ts1-1+BASENOTE+12*mode];
 373               	.LM51:
 374 013a 422F      		mov r20,r18
 375 013c 4150      		subi r20,1
 376 013e 550B      		sbc r21,r21
 377 0140 CA01      		movw r24,r20
 378 0142 2091 0000 		lds r18,mode
 379 0146 FA01      		movw r30,r20
 380 0148 E050      		subi r30,lo8(-(freq_s))
 381 014a F040      		sbci r31,hi8(-(freq_s))
 382 014c 2D9D      		mul r18,r13
 383 014e E00D      		add r30,r0
 384 0150 F11D      		adc r31,r1
 385 0152 1124      		clr __zero_reg__
 386 0154 2081      		ld r18,Z
 387 0156 2093 0000 		sts speed1,r18
  99:main.c        **** 			    }
 389               	.LM52:
 390 015a 2091 0000 		lds r18,mode
 391 015e 8050      		subi r24,lo8(-(freq_rs))
 392 0160 9040      		sbci r25,hi8(-(freq_rs))
 393 0162 FC01      		movw r30,r24
 394 0164 2D9D      		mul r18,r13
 395 0166 E00D      		add r30,r0
 396 0168 F11D      		adc r31,r1
 397 016a 1124      		clr __zero_reg__
 398 016c 8081      		ld r24,Z
 399 016e 8093 0000 		sts speed_rec1,r24
 400               	.L12:
GAS LISTING /tmp/ccqyO3R8.s 			page 8


 106:main.c        **** 			    PORTD &=~_BV(1); //LED
 402               	.LM53:
 403 0172 D093 0000 		sts voiceptr+1,r29
 404 0176 C093 0000 		sts voiceptr,r28
 405               	.L18:
 113:main.c        **** 			    break;
 407               	.LM54:
 408 017a 5998      		cbi 0xb,1
 114:main.c        **** 			  }
 410               	.LM55:
 411 017c 00C0      		rjmp .L2
 412               	.L11:
 104:main.c        **** 			    }
 414               	.LM56:
 415 017e 1092 0000 		sts speed1,__zero_reg__
 416 0182 00C0      		rjmp .L12
 417               	.L8:
 419               	.LM57:
 420 0184 F092 0000 		sts voiceptr+1,r15
 421 0188 E092 0000 		sts voiceptr,r14
 121:main.c        **** 				speed = 0;
 423               	.LM58:
 424 018c 1092 0000 		sts speed,__zero_reg__
 122:main.c        **** 				PORTD |= _BV(1); //LED
 426               	.LM59:
 427 0190 599A      		sbi 0xb,1
 428 0192 00C0      		rjmp .L2
 429               	.LBE6:
 430               	.LBE2:
 450               	.Lscope1:
 452               		.stabd	78,0,0
 453               		.comm	mode,1,1
 455               		.comm	mode_button,1,1
 457               		.comm	speed_rec1,1,1
 459               		.comm	speed1,1,1
 461               		.text
 463               	.Letext0:
 464               		.ident	"GCC: (GNU) 7.2.0"
 465               	.global __do_clear_bss
GAS LISTING /tmp/ccqyO3R8.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccqyO3R8.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccqyO3R8.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccqyO3R8.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccqyO3R8.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccqyO3R8.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccqyO3R8.s:114    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 mode_button
                            *COM*:0000000000000001 mode
                            *COM*:0000000000000001 speed1
                            *COM*:0000000000000001 speed_rec1

UNDEFINED SYMBOLS
voiceQuicklySleep
voiceptr
voiceDoBasicSynth
voiceNoise
ReadButtonMask
speed
volume
volume1
freq_s
freq_rs
speed_rec
__do_clear_bss
GAS LISTING /tmp/ccqyO3R8.s 			page 1


   1               		.file	"util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 113               	.global	voiceQuicklySleep
 115               	voiceQuicklySleep:
 116               		.stabd	46,0,0
   1:util.c        **** #include "util.h"
   2:util.c        **** #include <avr/io.h>
   3:util.c        **** #include <avr/interrupt.h>
   4:util.c        **** #include <util/delay.h>
   5:util.c        **** #include <avr/pgmspace.h>
   6:util.c        **** 
   7:util.c        **** #include "calced_speeds.c"
   8:util.c        **** 
   9:util.c        **** int8_t wave;
  10:util.c        **** 
  11:util.c        **** uint8_t (* volatile voiceptr)();
  12:util.c        **** volatile uint8_t speed;
  13:util.c        **** volatile uint8_t speed_rec;
  14:util.c        **** volatile uint8_t speed1;
  15:util.c        **** volatile uint8_t speed_rec1;
  16:util.c        **** volatile uint8_t volume;
  17:util.c        **** volatile uint8_t volume1;
  18:util.c        **** volatile uint16_t frametimer;
  19:util.c        **** volatile uint8_t mode;
  20:util.c        **** volatile uint8_t mode_button;
  21:util.c        **** volatile uint16_t fade_in;
  22:util.c        **** volatile uint16_t fade_out;
  23:util.c        **** volatile uint8_t fade_in_mode;
  24:util.c        **** volatile uint8_t fade_out_mode;
  25:util.c        **** 
  26:util.c        **** uint16_t GetFrametimer() //Make sure it gets frametimer as an atomic operation.
  27:util.c        **** {
  28:util.c        **** 	uint16_t ret;
  29:util.c        **** 	cli();
  30:util.c        **** 	ret = frametimer;
  31:util.c        **** 	sei();
  32:util.c        **** 	return ret;
  33:util.c        **** }
  34:util.c        **** 
  35:util.c        **** uint16_t lfsr = 0xACE1u;  /* Any nonzero start state will work. (from wikipedia) */
  36:util.c        **** 
  37:util.c        **** uint8_t GetRandom()
  38:util.c        **** {
  39:util.c        **** 	/* taps: 16 14 13 11; feedback polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
  40:util.c        **** 	uint8_t   bit  = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5) ) & 1;
  41:util.c        **** 	lfsr = (lfsr >> 1) | (bit << 15);
  42:util.c        **** 	return lfsr;
  43:util.c        **** }
  44:util.c        **** 
  45:util.c        **** 
  46:util.c        **** 
GAS LISTING /tmp/ccqyO3R8.s 			page 2


  47:util.c        **** 
  48:util.c        **** ISR( TIMER0_COMPA_vect, ISR_NAKED  )
  49:util.c        **** {
  50:util.c        **** /*	if( wave < 0 )
  51:util.c        **** 	{
  52:util.c        **** 		//Switch the inverting rail.  WARNING: Do we need to put the second rail into high impedance mode
  53:util.c        **** 	}
  54:util.c        **** 	else
  55:util.c        **** 	{
  56:util.c        **** 		//Switch the inverting rail.  WARNING: Do we need to put the second rail into high impedance mode
  57:util.c        **** */
  58:util.c        **** //	}
  59:util.c        **** 	asm( "reti" );
  60:util.c        **** }
  61:util.c        **** 
  62:util.c        **** 
  63:util.c        **** //		mov r25, r2\n\
  64:util.c        **** 		lsl r2\n\
  65:util.c        **** 		out 0x27,r2 /*OCR0A*/ \n\
  66:util.c        **** 		out 0x28,r2 /*OCR0B*/ \n\
  67:util.c        **** 		brcs cont__\n\
  68:util.c        **** 		cbi 0xa,3 /*DDRD |= _BV(3) */\n\
  69:util.c        **** 		cbi 0x4,3 /*DDRB |= _BV(3) */\n\
  70:util.c        **** cont__:\n\
  71:util.c        **** 		push r0\n\
  72:util.c        **** 
  73:util.c        **** //#define NAKED_T0OVF
  74:util.c        **** 
  75:util.c        **** ISR( TIMER0_OVF_vect, ISR_NAKED )
  76:util.c        **** {
  77:util.c        **** 	asm( "\n\
  78:util.c        **** 		sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
  79:util.c        **** 		rjmp intcont\n\
  80:util.c        **** 		sbic 0x1E, 0	/* If _BV(0) is set, continue to the below code. */ \n\
  81:util.c        **** 		rjmp make_zero\n\
  82:util.c        **** 		sbi 0xb,3 /*PORT |= _BV(3) */\n\
  83:util.c        **** 		sbi 0x5,3 /*PORTB |= _BV(3) */\n\
  84:util.c        **** 		rjmp intcont\n\
  85:util.c        **** make_zero:\n\
  86:util.c        **** 		cbi 0xb,3 /*PORTD &=~_BV(3) */\n\
  87:util.c        **** 		cbi 0x5,3 /*PORTB &=~_BV(3) */\n\
  88:util.c        **** intcont:\n\
  89:util.c        **** 		push r0\n\
  90:util.c        **** 		push r1\n\
  91:util.c        **** 		in r0,63 /*Store SREG*/\n\
  92:util.c        **** 		push r0\n\
  93:util.c        **** 		clr r1\n\
  94:util.c        **** 		push r16\n\
  95:util.c        **** 		push r17\n\
  96:util.c        **** 		push r18\n\
  97:util.c        **** 		push r19\n\
  98:util.c        **** 		push r20\n\
  99:util.c        **** 		push r21\n\
 100:util.c        **** 		push r22\n\
 101:util.c        **** 		push r23\n\
 102:util.c        **** 		push r24\n\
 103:util.c        **** 		push r25\n\
GAS LISTING /tmp/ccqyO3R8.s 			page 3


 104:util.c        **** 		push r30\n\
 105:util.c        **** 		push r31\n\
 106:util.c        **** 	");
 107:util.c        **** 
 108:util.c        **** 
 109:util.c        **** 	frametimer++;
 110:util.c        **** 	/*Ok... We can do whatever we want in here, as long as it's fast and before the end we update
 111:util.c        **** 		OCR0A and OCR0B.  That will cause the actual registers to update AFTER the next cycle. */
 112:util.c        **** 
 113:util.c        **** 	//Handle TIM0 OVR.  This happens at 31kHz.
 114:util.c        **** 	if( !voiceptr() )
 115:util.c        **** 	{
 116:util.c        **** 			//This disables the output drive.
 117:util.c        **** 			DDRB &=~_BV(3);
 118:util.c        **** 			DDRD &=~_BV(3);
 119:util.c        **** 			PORTB |= _BV(3);
 120:util.c        **** 			PORTD |= _BV(3);
 121:util.c        **** 			OCR0A = OCR0B = 255;
 122:util.c        **** 			goto end_int;
 123:util.c        **** 	}
 124:util.c        **** 	else
 125:util.c        **** 	{
 126:util.c        **** 		DDRD |= _BV(3);
 127:util.c        **** 		DDRB |= _BV(3);
 128:util.c        **** 	}
 129:util.c        **** 
 130:util.c        **** 	//Tricky: Detect if we're switching states, if so, need to trigger early-interrupt-handler transit
 131:util.c        **** 	//This data is stored in GPIOR0 so we can operate at the beginning of the next interrupt without i
 132:util.c        **** 	if( wave < 0 )
 133:util.c        **** 	{
 134:util.c        **** 		if( GPIOR0 & _BV(0) )
 135:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 136:util.c        **** 		else
 137:util.c        **** 			GPIOR0 &=~_BV(1);
 138:util.c        **** 		GPIOR0 &= ~_BV(0);
 139:util.c        **** 	}
 140:util.c        **** 	else
 141:util.c        **** 	{
 142:util.c        **** 		if( !(GPIOR0 & _BV(0)) )
 143:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 144:util.c        **** 		else
 145:util.c        **** 			GPIOR0 &=~_BV(1);
 146:util.c        **** 		GPIOR0 |= _BV(0);
 147:util.c        **** 	}
 148:util.c        **** 
 149:util.c        **** 	OCR0A = OCR0B = ((uint8_t)wave)<<1;
 150:util.c        **** end_int:
 151:util.c        **** 	asm( "\
 152:util.c        **** 		pop r31\n\
 153:util.c        **** 		pop r30\n\
 154:util.c        **** 		pop r25\n\
 155:util.c        **** 		pop r24\n\
 156:util.c        **** 		pop r23\n\
 157:util.c        **** 		pop r22\n\
 158:util.c        **** 		pop r21\n\
 159:util.c        **** 		pop r20\n\
 160:util.c        **** 		pop r19\n\
GAS LISTING /tmp/ccqyO3R8.s 			page 4


 161:util.c        **** 		pop r18\n\
 162:util.c        **** 		pop r17\n\
 163:util.c        **** 		pop r16\n\
 164:util.c        **** 		pop r0\n\
 165:util.c        **** 		out 63, r0 /*Restore SREG*/\n\
 166:util.c        **** 		pop r1\n\
 167:util.c        **** 		pop r0\n\
 168:util.c        **** 		reti\n");
 169:util.c        **** }
 170:util.c        **** 
 171:util.c        **** 
 172:util.c        **** 
 173:util.c        **** #ifdef HAS_SAMPLES
 174:util.c        **** #include "samples.c"
 175:util.c        **** const extern int8_t PROGMEM auddat[7981];
 176:util.c        **** uint8_t voicePlayWave()
 177:util.c        **** {
 178:util.c        **** 	static uint16_t sampleCount = 0;
 179:util.c        **** 	wave = pgm_read_byte( &auddat[sampleCount>>2] );
 180:util.c        **** 	if( sampleCount == 32000 )
 181:util.c        **** 	{
 182:util.c        **** 		voiceptr = voiceQuicklySleep;
 183:util.c        **** 		sampleCount = 0;
 184:util.c        **** 	}
 185:util.c        **** 	sampleCount++;
 186:util.c        **** 	return 1;
 187:util.c        **** }
 188:util.c        **** #else
 189:util.c        **** uint8_t voicePlayWave()
 190:util.c        **** {
 191:util.c        **** 	voiceptr = voiceQuicklySleep;
 192:util.c        **** }
 193:util.c        **** 
 194:util.c        **** #endif
 195:util.c        **** 
 196:util.c        **** uint8_t voiceDoBasicSynth()
 197:util.c        **** {
 198:util.c        **** 	int16_t twave;
 199:util.c        **** 	static uint8_t up;
 200:util.c        **** 	static uint8_t up1;
 201:util.c        **** 	static int8_t wave0;
 202:util.c        **** 	static int8_t wave1;
 203:util.c        **** 
 204:util.c        **** 
 205:util.c        **** 	if( !speed )
 206:util.c        **** 	{
 207:util.c        **** 		voiceptr = voiceQuicklySleep;
 208:util.c        **** 		wave0 = wave1 = 0;
 209:util.c        **** 		return 0;
 210:util.c        **** 	}
 211:util.c        **** 
 212:util.c        **** 	twave = wave0;
 213:util.c        **** 	if( up )
 214:util.c        **** 	{
 215:util.c        **** 		twave+=speed;
 216:util.c        **** 		if( twave > speed_rec ) { up = 0; twave = speed_rec - (twave-speed_rec); } //I hope this is right
 217:util.c        **** 	}
GAS LISTING /tmp/ccqyO3R8.s 			page 5


 218:util.c        **** 	else
 219:util.c        **** 	{
 220:util.c        **** 		twave-=speed;
 221:util.c        **** 		if( twave < -speed_rec ) { up = 1; twave = -speed_rec - (twave+speed_rec); } //I hope this is rig
 222:util.c        **** 	}
 223:util.c        **** 	wave0 = twave;
 224:util.c        **** 
 225:util.c        **** 	if( speed1 )
 226:util.c        **** 	{
 227:util.c        **** 		twave = wave1;
 228:util.c        **** 		if( up1 )
 229:util.c        **** 		{
 230:util.c        **** 			twave+=speed1;
 231:util.c        **** 			if( twave > speed_rec1 ) { up1 = 0; twave = speed_rec1 - (twave-speed_rec1); } //I hope this is 
 232:util.c        **** 		}
 233:util.c        **** 		else
 234:util.c        **** 		{
 235:util.c        **** 			twave-=speed1;
 236:util.c        **** 			if( twave < -speed_rec1 ) { up1 = 1; twave = -speed_rec1 - (twave+speed_rec1); } //I hope this i
 237:util.c        **** 		}
 238:util.c        **** 		wave1 = twave;
 239:util.c        **** 		wave = ((wave1*volume)>>8)+((wave0*volume)>>8);
 240:util.c        **** 		return 1;
 241:util.c        **** 	}
 242:util.c        **** 	else
 243:util.c        **** 	{
 244:util.c        **** 		wave = (wave0*volume)>>8;
 245:util.c        **** 		wave1 = 0;
 246:util.c        **** 		return 1;
 247:util.c        **** 	}
 248:util.c        **** }
 249:util.c        **** 
 250:util.c        **** 
 251:util.c        **** 
 252:util.c        **** uint8_t voiceQuicklySleep()
 253:util.c        **** {
 118               	.LM0:
 119               	.LFBB1:
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
 254:util.c        **** 	return 0;
 255:util.c        **** }
 125               	.LM1:
 126 0000 80E0      		ldi r24,0
 127               	/* epilogue start */
 128 0002 0895      		ret
 130               	.Lscope1:
 132               		.stabd	78,0,0
 134               	.global	GetFrametimer
 136               	GetFrametimer:
 137               		.stabd	46,0,0
  27:util.c        **** 	uint16_t ret;
 139               	.LM2:
 140               	.LFBB2:
 141               	/* prologue: function */
GAS LISTING /tmp/ccqyO3R8.s 			page 6


 142               	/* frame size = 0 */
 143               	/* stack size = 0 */
 144               	.L__stack_usage = 0
  29:util.c        **** 	ret = frametimer;
 146               	.LM3:
 147               	/* #APP */
 148               	 ;  29 "util.c" 1
 149 0004 F894      		cli
 150               	 ;  0 "" 2
  30:util.c        **** 	sei();
 152               	.LM4:
 153               	/* #NOAPP */
 154 0006 8091 0000 		lds r24,frametimer
 155 000a 9091 0000 		lds r25,frametimer+1
  31:util.c        **** 	return ret;
 157               	.LM5:
 158               	/* #APP */
 159               	 ;  31 "util.c" 1
 160 000e 7894      		sei
 161               	 ;  0 "" 2
 162               	/* epilogue start */
  33:util.c        **** 
 164               	.LM6:
 165               	/* #NOAPP */
 166 0010 0895      		ret
 171               	.Lscope2:
 173               		.stabd	78,0,0
 175               	.global	GetRandom
 177               	GetRandom:
 178               		.stabd	46,0,0
  38:util.c        **** 	/* taps: 16 14 13 11; feedback polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
 180               	.LM7:
 181               	.LFBB3:
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
  40:util.c        **** 	lfsr = (lfsr >> 1) | (bit << 15);
 187               	.LM8:
 188 0012 4091 0000 		lds r20,lfsr
 189 0016 5091 0000 		lds r21,lfsr+1
 190 001a 9A01      		movw r18,r20
 191 001c 3695      		lsr r19
 192 001e 2795      		ror r18
 193 0020 3695      		lsr r19
 194 0022 2795      		ror r18
 195 0024 BA01      		movw r22,r20
 196 0026 93E0      		ldi r25,3
 197               		1:
 198 0028 7695      		lsr r23
 199 002a 6795      		ror r22
 200 002c 9A95      		dec r25
 201 002e 01F4      		brne 1b
 202 0030 2627      		eor r18,r22
 203 0032 2427      		eor r18,r20
 204 0034 BA01      		movw r22,r20
 205 0036 35E0      		ldi r19,5
GAS LISTING /tmp/ccqyO3R8.s 			page 7


 206               		1:
 207 0038 7695      		lsr r23
 208 003a 6795      		ror r22
 209 003c 3A95      		dec r19
 210 003e 01F4      		brne 1b
 211 0040 2627      		eor r18,r22
  41:util.c        **** 	return lfsr;
 213               	.LM9:
 214 0042 2170      		andi r18,1
 215 0044 922F      		mov r25,r18
 216 0046 9795      		ror r25
 217 0048 9927      		clr r25
 218 004a 9795      		ror r25
 219 004c 80E0      		ldi r24,0
 220 004e 5695      		lsr r21
 221 0050 4795      		ror r20
 222 0052 842B      		or r24,r20
 223 0054 952B      		or r25,r21
 224 0056 9093 0000 		sts lfsr+1,r25
 225 005a 8093 0000 		sts lfsr,r24
 226               	/* epilogue start */
  43:util.c        **** 
 228               	.LM10:
 229 005e 0895      		ret
 231               	.Lscope3:
 233               		.stabd	78,0,0
 235               	.global	__vector_14
 237               	__vector_14:
 238               		.stabd	46,0,0
  49:util.c        **** /*	if( wave < 0 )
 240               	.LM11:
 241               	.LFBB4:
 242               	/* prologue: naked */
 243               	/* frame size = 0 */
 244               	/* stack size = 0 */
 245               	.L__stack_usage = 0
  59:util.c        **** }
 247               	.LM12:
 248               	/* #APP */
 249               	 ;  59 "util.c" 1
 250 0060 1895      		reti
 251               	 ;  0 "" 2
 252               	/* epilogue start */
  60:util.c        **** 
 254               	.LM13:
 255               	/* #NOAPP */
 257               	.Lscope4:
 259               		.stabd	78,0,0
 261               	.global	__vector_16
 263               	__vector_16:
 264               		.stabd	46,0,0
  76:util.c        **** 	asm( "\n\
 266               	.LM14:
 267               	.LFBB5:
 268               	/* prologue: naked */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
GAS LISTING /tmp/ccqyO3R8.s 			page 8


 271               	.L__stack_usage = 0
  77:util.c        **** 		sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
 273               	.LM15:
 274               	/* #APP */
 275               	 ;  77 "util.c" 1
 276               		
 277 0062 F19B      			sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
 278 0064 00C0      			rjmp intcont
 279 0066 F099      			sbic 0x1E, 0	/* If _BV(0) is set, continue to the below code. */ 
 280 0068 00C0      			rjmp make_zero
 281 006a 5B9A      			sbi 0xb,3 /*PORT |= _BV(3) */
 282 006c 2B9A      			sbi 0x5,3 /*PORTB |= _BV(3) */
 283 006e 00C0      			rjmp intcont
 284               	make_zero:
 285 0070 5B98      			cbi 0xb,3 /*PORTD &=~_BV(3) */
 286 0072 2B98      			cbi 0x5,3 /*PORTB &=~_BV(3) */
 287               	intcont:
 288 0074 0F92      			push r0
 289 0076 1F92      			push r1
 290 0078 0FB6      			in r0,63 /*Store SREG*/
 291 007a 0F92      			push r0
 292 007c 1124      			clr r1
 293 007e 0F93      			push r16
 294 0080 1F93      			push r17
 295 0082 2F93      			push r18
 296 0084 3F93      			push r19
 297 0086 4F93      			push r20
 298 0088 5F93      			push r21
 299 008a 6F93      			push r22
 300 008c 7F93      			push r23
 301 008e 8F93      			push r24
 302 0090 9F93      			push r25
 303 0092 EF93      			push r30
 304 0094 FF93      			push r31
 305               		
 306               	 ;  0 "" 2
 109:util.c        **** 	/*Ok... We can do whatever we want in here, as long as it's fast and before the end we update
 308               	.LM16:
 309               	/* #NOAPP */
 310 0096 8091 0000 		lds r24,frametimer
 311 009a 9091 0000 		lds r25,frametimer+1
 312 009e 0196      		adiw r24,1
 313 00a0 9093 0000 		sts frametimer+1,r25
 314 00a4 8093 0000 		sts frametimer,r24
 114:util.c        **** 	{
 316               	.LM17:
 317 00a8 E091 0000 		lds r30,voiceptr
 318 00ac F091 0000 		lds r31,voiceptr+1
 319 00b0 0995      		icall
 320 00b2 8111      		cpse r24,__zero_reg__
 321 00b4 00C0      		rjmp .L6
 117:util.c        **** 			DDRD &=~_BV(3);
 323               	.LM18:
 324 00b6 2398      		cbi 0x4,3
 118:util.c        **** 			PORTB |= _BV(3);
 326               	.LM19:
 327 00b8 5398      		cbi 0xa,3
GAS LISTING /tmp/ccqyO3R8.s 			page 9


 119:util.c        **** 			PORTD |= _BV(3);
 329               	.LM20:
 330 00ba 2B9A      		sbi 0x5,3
 120:util.c        **** 			OCR0A = OCR0B = 255;
 332               	.LM21:
 333 00bc 5B9A      		sbi 0xb,3
 121:util.c        **** 			goto end_int;
 335               	.LM22:
 336 00be 8FEF      		ldi r24,lo8(-1)
 337 00c0 88BD      		out 0x28,r24
 338 00c2 87BD      		out 0x27,r24
 122:util.c        **** 	}
 340               	.LM23:
 341 00c4 00C0      		rjmp .L7
 342               	.L6:
 126:util.c        **** 		DDRB |= _BV(3);
 344               	.LM24:
 345 00c6 539A      		sbi 0xa,3
 127:util.c        **** 	}
 347               	.LM25:
 348 00c8 239A      		sbi 0x4,3
 132:util.c        **** 	{
 350               	.LM26:
 351 00ca 8091 0000 		lds r24,wave
 352 00ce 87FF      		sbrs r24,7
 353 00d0 00C0      		rjmp .L8
 134:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 355               	.LM27:
 356 00d2 F09B      		sbis 0x1e,0
 357 00d4 00C0      		rjmp .L9
 135:util.c        **** 		else
 359               	.LM28:
 360 00d6 F19A      		sbi 0x1e,1
 361 00d8 00C0      		rjmp .L10
 362               	.L9:
 137:util.c        **** 		GPIOR0 &= ~_BV(0);
 364               	.LM29:
 365 00da F198      		cbi 0x1e,1
 366               	.L10:
 138:util.c        **** 	}
 368               	.LM30:
 369 00dc F098      		cbi 0x1e,0
 370 00de 00C0      		rjmp .L11
 371               	.L8:
 142:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 373               	.LM31:
 374 00e0 F099      		sbic 0x1e,0
 375 00e2 00C0      		rjmp .L12
 143:util.c        **** 		else
 377               	.LM32:
 378 00e4 F19A      		sbi 0x1e,1
 379 00e6 00C0      		rjmp .L13
 380               	.L12:
 145:util.c        **** 		GPIOR0 |= _BV(0);
 382               	.LM33:
 383 00e8 F198      		cbi 0x1e,1
 384               	.L13:
GAS LISTING /tmp/ccqyO3R8.s 			page 10


 146:util.c        **** 	}
 386               	.LM34:
 387 00ea F09A      		sbi 0x1e,0
 388               	.L11:
 149:util.c        **** end_int:
 390               	.LM35:
 391 00ec 8091 0000 		lds r24,wave
 392 00f0 880F      		lsl r24
 393 00f2 88BD      		out 0x28,r24
 394 00f4 87BD      		out 0x27,r24
 395               	.L7:
 151:util.c        **** 		pop r31\n\
 397               	.LM36:
 398               	/* #APP */
 399               	 ;  151 "util.c" 1
 400 00f6 FF91      				pop r31
 401 00f8 EF91      			pop r30
 402 00fa 9F91      			pop r25
 403 00fc 8F91      			pop r24
 404 00fe 7F91      			pop r23
 405 0100 6F91      			pop r22
 406 0102 5F91      			pop r21
 407 0104 4F91      			pop r20
 408 0106 3F91      			pop r19
 409 0108 2F91      			pop r18
 410 010a 1F91      			pop r17
 411 010c 0F91      			pop r16
 412 010e 0F90      			pop r0
 413 0110 0FBE      			out 63, r0 /*Restore SREG*/
 414 0112 1F90      			pop r1
 415 0114 0F90      			pop r0
 416 0116 1895      			reti
 417               	
 418               	 ;  0 "" 2
 419               	/* epilogue start */
 169:util.c        **** 
 421               	.LM37:
 422               	/* #NOAPP */
 424               	.Lscope5:
 426               		.stabd	78,0,0
 428               	.global	voicePlayWave
 430               	voicePlayWave:
 431               		.stabd	46,0,0
 190:util.c        **** 	voiceptr = voiceQuicklySleep;
 433               	.LM38:
 434               	.LFBB6:
 435               	/* prologue: function */
 436               	/* frame size = 0 */
 437               	/* stack size = 0 */
 438               	.L__stack_usage = 0
 191:util.c        **** }
 440               	.LM39:
 441 0118 80E0      		ldi r24,lo8(gs(voiceQuicklySleep))
 442 011a 90E0      		ldi r25,hi8(gs(voiceQuicklySleep))
 443 011c 9093 0000 		sts voiceptr+1,r25
 444 0120 8093 0000 		sts voiceptr,r24
 445               	/* epilogue start */
GAS LISTING /tmp/ccqyO3R8.s 			page 11


 192:util.c        **** 
 447               	.LM40:
 448 0124 0895      		ret
 450               	.Lscope6:
 452               		.stabd	78,0,0
 454               	.global	voiceDoBasicSynth
 456               	voiceDoBasicSynth:
 457               		.stabd	46,0,0
 197:util.c        **** 	int16_t twave;
 459               	.LM41:
 460               	.LFBB7:
 461               	/* prologue: function */
 462               	/* frame size = 0 */
 463               	/* stack size = 0 */
 464               	.L__stack_usage = 0
 205:util.c        **** 	{
 466               	.LM42:
 467 0126 8091 0000 		lds r24,speed
 468 012a 8111      		cpse r24,__zero_reg__
 469 012c 00C0      		rjmp .L16
 207:util.c        **** 		wave0 = wave1 = 0;
 471               	.LM43:
 472 012e 80E0      		ldi r24,lo8(gs(voiceQuicklySleep))
 473 0130 90E0      		ldi r25,hi8(gs(voiceQuicklySleep))
 474 0132 9093 0000 		sts voiceptr+1,r25
 475 0136 8093 0000 		sts voiceptr,r24
 208:util.c        **** 		return 0;
 477               	.LM44:
 478 013a 1092 0000 		sts wave1.1846,__zero_reg__
 479 013e 1092 0000 		sts wave0.1845,__zero_reg__
 209:util.c        **** 	}
 481               	.LM45:
 482 0142 80E0      		ldi r24,0
 483 0144 0895      		ret
 484               	.L16:
 212:util.c        **** 	if( up )
 486               	.LM46:
 487 0146 2091 0000 		lds r18,wave0.1845
 488 014a 022E      		mov __tmp_reg__,r18
 489 014c 000C      		lsl r0
 490 014e 330B      		sbc r19,r19
 213:util.c        **** 	{
 492               	.LM47:
 493 0150 8091 0000 		lds r24,up.1843
 494 0154 8823      		tst r24
 495 0156 01F4      		brne .+2
 496 0158 00C0      		rjmp .L18
 215:util.c        **** 		if( twave > speed_rec ) { up = 0; twave = speed_rec - (twave-speed_rec); } //I hope this is right
 498               	.LM48:
 499 015a 8091 0000 		lds r24,speed
 500 015e 280F      		add r18,r24
 501 0160 311D      		adc r19,__zero_reg__
 216:util.c        **** 	}
 503               	.LM49:
 504 0162 8091 0000 		lds r24,speed_rec
 505 0166 8217      		cp r24,r18
 506 0168 1306      		cpc __zero_reg__,r19
GAS LISTING /tmp/ccqyO3R8.s 			page 12


 507 016a 04F4      		brge .L19
 216:util.c        **** 	}
 509               	.LM50:
 510 016c 1092 0000 		sts up.1843,__zero_reg__
 511 0170 8091 0000 		lds r24,speed_rec
 512 0174 9091 0000 		lds r25,speed_rec
 513 0178 291B      		sub r18,r25
 514 017a 3109      		sbc r19,__zero_reg__
 515 017c 90E0      		ldi r25,0
 516 017e AC01      		movw r20,r24
 517 0180 421B      		sub r20,r18
 518 0182 530B      		sbc r21,r19
 519 0184 9A01      		movw r18,r20
 520               	.L19:
 223:util.c        **** 
 522               	.LM51:
 523 0186 622F      		mov r22,r18
 524 0188 2093 0000 		sts wave0.1845,r18
 225:util.c        **** 	{
 526               	.LM52:
 527 018c 8091 0000 		lds r24,speed1
 528 0190 8823      		tst r24
 529 0192 01F4      		brne .+2
 530 0194 00C0      		rjmp .L20
 227:util.c        **** 		if( up1 )
 532               	.LM53:
 533 0196 2091 0000 		lds r18,wave1.1846
 534 019a 022E      		mov __tmp_reg__,r18
 535 019c 000C      		lsl r0
 536 019e 330B      		sbc r19,r19
 228:util.c        **** 		{
 538               	.LM54:
 539 01a0 8091 0000 		lds r24,up1.1844
 540 01a4 8823      		tst r24
 541 01a6 01F4      		brne .+2
 542 01a8 00C0      		rjmp .L21
 230:util.c        **** 			if( twave > speed_rec1 ) { up1 = 0; twave = speed_rec1 - (twave-speed_rec1); } //I hope this is 
 544               	.LM55:
 545 01aa 8091 0000 		lds r24,speed1
 546 01ae 280F      		add r18,r24
 547 01b0 311D      		adc r19,__zero_reg__
 231:util.c        **** 		}
 549               	.LM56:
 550 01b2 8091 0000 		lds r24,speed_rec1
 551 01b6 8217      		cp r24,r18
 552 01b8 1306      		cpc __zero_reg__,r19
 553 01ba 04F4      		brge .L22
 231:util.c        **** 		}
 555               	.LM57:
 556 01bc 1092 0000 		sts up1.1844,__zero_reg__
 557 01c0 4091 0000 		lds r20,speed_rec1
 558 01c4 8091 0000 		lds r24,speed_rec1
 559 01c8 281B      		sub r18,r24
 560 01ca 3109      		sbc r19,__zero_reg__
 561 01cc 50E0      		ldi r21,0
 562 01ce CA01      		movw r24,r20
 563 01d0 821B      		sub r24,r18
GAS LISTING /tmp/ccqyO3R8.s 			page 13


 564 01d2 930B      		sbc r25,r19
 565 01d4 9C01      		movw r18,r24
 566               	.L22:
 238:util.c        **** 		wave = ((wave1*volume)>>8)+((wave0*volume)>>8);
 568               	.LM58:
 569 01d6 2093 0000 		sts wave1.1846,r18
 239:util.c        **** 		return 1;
 571               	.LM59:
 572 01da 3091 0000 		lds r19,volume
 573 01de 4091 0000 		lds r20,volume
 574 01e2 2303      		mulsu r18,r19
 575 01e4 9001      		movw r18,r0
 576 01e6 1124      		clr __zero_reg__
 577 01e8 6403      		mulsu r22,r20
 578 01ea A001      		movw r20,r0
 579 01ec 1124      		clr __zero_reg__
 580 01ee 852F      		mov r24,r21
 581 01f0 830F      		add r24,r19
 582 01f2 8093 0000 		sts wave,r24
 583               	.L23:
 246:util.c        **** 	}
 585               	.LM60:
 586 01f6 81E0      		ldi r24,lo8(1)
 587               	/* epilogue start */
 248:util.c        **** 
 589               	.LM61:
 590 01f8 0895      		ret
 591               	.L18:
 220:util.c        **** 		if( twave < -speed_rec ) { up = 1; twave = -speed_rec - (twave+speed_rec); } //I hope this is rig
 593               	.LM62:
 594 01fa 8091 0000 		lds r24,speed
 595 01fe 281B      		sub r18,r24
 596 0200 3109      		sbc r19,__zero_reg__
 221:util.c        **** 	}
 598               	.LM63:
 599 0202 8091 0000 		lds r24,speed_rec
 600 0206 90E0      		ldi r25,0
 601 0208 9195      		neg r25
 602 020a 8195      		neg r24
 603 020c 9109      		sbc r25,__zero_reg__
 604 020e 2817      		cp r18,r24
 605 0210 3907      		cpc r19,r25
 606 0212 04F0      		brlt .+2
 607 0214 00C0      		rjmp .L19
 221:util.c        **** 	}
 609               	.LM64:
 610 0216 81E0      		ldi r24,lo8(1)
 611 0218 8093 0000 		sts up.1843,r24
 612 021c 4091 0000 		lds r20,speed_rec
 613 0220 8091 0000 		lds r24,speed_rec
 614 0224 820F      		add r24,r18
 615 0226 932F      		mov r25,r19
 616 0228 911D      		adc r25,__zero_reg__
 617 022a 242F      		mov r18,r20
 618 022c 30E0      		ldi r19,0
 619 022e 3195      		neg r19
 620 0230 2195      		neg r18
GAS LISTING /tmp/ccqyO3R8.s 			page 14


 621 0232 3109      		sbc r19,__zero_reg__
 622 0234 281B      		sub r18,r24
 623 0236 390B      		sbc r19,r25
 624 0238 00C0      		rjmp .L19
 625               	.L21:
 235:util.c        **** 			if( twave < -speed_rec1 ) { up1 = 1; twave = -speed_rec1 - (twave+speed_rec1); } //I hope this i
 627               	.LM65:
 628 023a 8091 0000 		lds r24,speed1
 629 023e 281B      		sub r18,r24
 630 0240 3109      		sbc r19,__zero_reg__
 236:util.c        **** 		}
 632               	.LM66:
 633 0242 8091 0000 		lds r24,speed_rec1
 634 0246 90E0      		ldi r25,0
 635 0248 9195      		neg r25
 636 024a 8195      		neg r24
 637 024c 9109      		sbc r25,__zero_reg__
 638 024e 2817      		cp r18,r24
 639 0250 3907      		cpc r19,r25
 640 0252 04F4      		brge .L22
 236:util.c        **** 		}
 642               	.LM67:
 643 0254 81E0      		ldi r24,lo8(1)
 644 0256 8093 0000 		sts up1.1844,r24
 645 025a 9091 0000 		lds r25,speed_rec1
 646 025e 4091 0000 		lds r20,speed_rec1
 647 0262 420F      		add r20,r18
 648 0264 532F      		mov r21,r19
 649 0266 511D      		adc r21,__zero_reg__
 650 0268 292F      		mov r18,r25
 651 026a 30E0      		ldi r19,0
 652 026c 3195      		neg r19
 653 026e 2195      		neg r18
 654 0270 3109      		sbc r19,__zero_reg__
 655 0272 241B      		sub r18,r20
 656 0274 350B      		sbc r19,r21
 657 0276 00C0      		rjmp .L22
 658               	.L20:
 244:util.c        **** 		wave1 = 0;
 660               	.LM68:
 661 0278 3091 0000 		lds r19,volume
 662 027c 2303      		mulsu r18,r19
 663 027e 9001      		movw r18,r0
 664 0280 1124      		clr __zero_reg__
 665 0282 3093 0000 		sts wave,r19
 245:util.c        **** 		return 1;
 667               	.LM69:
 668 0286 1092 0000 		sts wave1.1846,__zero_reg__
 669 028a 00C0      		rjmp .L23
 677               	.Lscope7:
 679               		.stabd	78,0,0
 681               	.global	voiceNoise
 683               	voiceNoise:
 684               		.stabd	46,0,0
 256:util.c        **** 
 257:util.c        **** uint8_t voiceNoise()
 258:util.c        **** {
GAS LISTING /tmp/ccqyO3R8.s 			page 15


 686               	.LM70:
 687               	.LFBB8:
 688               	/* prologue: function */
 689               	/* frame size = 0 */
 690               	/* stack size = 0 */
 691               	.L__stack_usage = 0
 259:util.c        **** 	static uint8_t speedmark;
 260:util.c        **** 	speedmark++;
 693               	.LM71:
 694 028c 8091 0000 		lds r24,speedmark.1851
 695 0290 8F5F      		subi r24,lo8(-(1))
 696 0292 8093 0000 		sts speedmark.1851,r24
 261:util.c        **** 
 262:util.c        **** 	if( speedmark == speed )
 698               	.LM72:
 699 0296 9091 0000 		lds r25,speed
 700 029a 8913      		cpse r24,r25
 701 029c 00C0      		rjmp .L25
 263:util.c        **** 	{
 264:util.c        **** 		wave = (((int8_t)GetRandom()) * volume)>>8;
 703               	.LM73:
 704 029e 0E94 0000 		call GetRandom
 705 02a2 2091 0000 		lds r18,volume
 706 02a6 382F      		mov r19,r24
 707 02a8 3203      		mulsu r19,r18
 708 02aa C001      		movw r24,r0
 709 02ac 1124      		clr __zero_reg__
 710 02ae 9093 0000 		sts wave,r25
 265:util.c        **** 		speedmark = 0;
 712               	.LM74:
 713 02b2 1092 0000 		sts speedmark.1851,__zero_reg__
 714               	.L25:
 266:util.c        **** 	}
 267:util.c        **** 	return 1;
 268:util.c        **** }
 716               	.LM75:
 717 02b6 81E0      		ldi r24,lo8(1)
 718               	/* epilogue start */
 719 02b8 0895      		ret
 724               	.Lscope8:
 726               		.stabd	78,0,0
 728               	.global	ReadButtonMask
 730               	ReadButtonMask:
 731               		.stabd	46,0,0
 269:util.c        **** 
 270:util.c        **** 
 271:util.c        **** uint16_t ReadButtonMask()
 272:util.c        **** {
 733               	.LM76:
 734               	.LFBB9:
 735               	/* prologue: function */
 736               	/* frame size = 0 */
 737               	/* stack size = 0 */
 738               	.L__stack_usage = 0
 273:util.c        **** 	uint16_t ret = 0;
 274:util.c        **** 	if( BUTTON0DOWN ) ret |= _BV(0);
 740               	.LM77:
GAS LISTING /tmp/ccqyO3R8.s 			page 16


 741 02ba 26B1      		in r18,0x6
 742 02bc 2295      		swap r18
 743 02be 2695      		lsr r18
 744 02c0 2770      		andi r18,lo8(7)
 745 02c2 31E0      		ldi r19,lo8(1)
 746 02c4 2327      		eor r18,r19
 273:util.c        **** 	uint16_t ret = 0;
 748               	.LM78:
 749 02c6 822F      		mov r24,r18
 750 02c8 8170      		andi r24,1
 751 02ca 90E0      		ldi r25,0
 275:util.c        **** 	if( BUTTON1DOWN ) ret |= _BV(1);
 753               	.LM79:
 754 02cc 4A9B      		sbis 0x9,2
 756               	.LM80:
 757 02ce 8260      		ori r24,2
 758               	.L27:
 276:util.c        **** 	if( BUTTON2DOWN ) ret |= _BV(2);
 760               	.LM81:
 761 02d0 4C9B      		sbis 0x9,4
 763               	.LM82:
 764 02d2 8460      		ori r24,4
 765               	.L28:
 277:util.c        **** 	if( BUTTON3DOWN ) ret |= _BV(3);
 767               	.LM83:
 768 02d4 619B      		sbis 0xc,1
 770               	.LM84:
 771 02d6 8860      		ori r24,8
 772               	.L29:
 278:util.c        **** 	if( BUTTON4DOWN ) ret |= _BV(4);
 774               	.LM85:
 775 02d8 4F9B      		sbis 0x9,7
 777               	.LM86:
 778 02da 8061      		ori r24,16
 779               	.L30:
 279:util.c        **** 	if( BUTTON5DOWN ) ret |= _BV(5);
 781               	.LM87:
 782 02dc 189B      		sbis 0x3,0
 784               	.LM88:
 785 02de 8062      		ori r24,32
 786               	.L31:
 280:util.c        **** 	if( BUTTON6DOWN ) ret |= _BV(6);
 788               	.LM89:
 789 02e0 199B      		sbis 0x3,1
 791               	.LM90:
 792 02e2 8064      		ori r24,64
 793               	.L32:
 281:util.c        **** 	if( BUTTON7DOWN ) ret |= _BV(7);
 795               	.LM91:
 796 02e4 1C9B      		sbis 0x3,4
 798               	.LM92:
 799 02e6 8068      		ori r24,128
 800               	.L33:
 282:util.c        **** 	if( BUTTON8DOWN ) ret |= _BV(8);
 802               	.LM93:
 803 02e8 629B      		sbis 0xc,2
 805               	.LM94:
GAS LISTING /tmp/ccqyO3R8.s 			page 17


 806 02ea 9160      		ori r25,1
 807               	.L34:
 283:util.c        **** 	if( BUTTON9DOWN ) ret |= _BV(9);
 809               	.LM95:
 810 02ec 639B      		sbis 0xc,3
 812               	.LM96:
 813 02ee 9260      		ori r25,2
 814               	.L35:
 284:util.c        **** 	if( BUTTON10DOWN ) ret |= _BV(10);
 816               	.LM97:
 817 02f0 329B      		sbis 0x6,2
 819               	.LM98:
 820 02f2 9460      		ori r25,4
 821               	.L36:
 285:util.c        **** 	if( BUTTON11DOWN ) ret |= _BV(11);
 823               	.LM99:
 824 02f4 339B      		sbis 0x6,3
 826               	.LM100:
 827 02f6 9860      		ori r25,8
 828               	.L37:
 286:util.c        **** 	if( BUTTON12DOWN ) ret |= _BV(12);
 830               	.LM101:
 831 02f8 349B      		sbis 0x6,4
 833               	.LM102:
 834 02fa 9061      		ori r25,16
 835               	.L26:
 836               	/* epilogue start */
 287:util.c        **** 	return ret;
 288:util.c        **** }
 838               	.LM103:
 839 02fc 0895      		ret
 844               	.Lscope9:
 846               		.stabd	78,0,0
 847               		.local	speedmark.1851
 848               		.comm	speedmark.1851,1,1
 850               		.local	up1.1844
 851               		.comm	up1.1844,1,1
 853               		.local	up.1843
 854               		.comm	up.1843,1,1
 856               		.local	wave0.1845
 857               		.comm	wave0.1845,1,1
 859               		.local	wave1.1846
 860               		.comm	wave1.1846,1,1
 862               	.global	lfsr
 863               		.data
 866               	lfsr:
 867 0000 E1AC      		.word	-21279
 869               		.comm	fade_out_mode,1,1
 871               		.comm	fade_in_mode,1,1
 873               		.comm	fade_out,2,1
 875               		.comm	fade_in,2,1
 877               		.comm	mode_button,1,1
 879               		.comm	mode,1,1
 881               		.comm	frametimer,2,1
 883               		.comm	volume1,1,1
 885               		.comm	volume,1,1
 887               		.comm	speed_rec1,1,1
GAS LISTING /tmp/ccqyO3R8.s 			page 18


 889               		.comm	speed1,1,1
 891               		.comm	speed_rec,1,1
 893               		.comm	speed,1,1
 895               		.comm	voiceptr,2,1
 897               		.comm	wave,1,1
 899               	.global	freq_rs
 902               	freq_rs:
 903 0002 77        		.byte	119
 904 0003 71        		.byte	113
 905 0004 6A        		.byte	106
 906 0005 64        		.byte	100
 907 0006 5F        		.byte	95
 908 0007 59        		.byte	89
 909 0008 7F        		.byte	127
 910 0009 50        		.byte	80
 911 000a 71        		.byte	113
 912 000b 47        		.byte	71
 913 000c 43        		.byte	67
 914 000d 5F        		.byte	95
 915 000e 77        		.byte	119
 916 000f 71        		.byte	113
 917 0010 50        		.byte	80
 918 0011 7E        		.byte	126
 919 0012 47        		.byte	71
 920 0013 70        		.byte	112
 921 0014 7F        		.byte	127
 922 0015 50        		.byte	80
 923 0016 5E        		.byte	94
 924 0017 47        		.byte	71
 925 0018 43        		.byte	67
 926 0019 5F        		.byte	95
 927 001a 77        		.byte	119
 928 001b 7F        		.byte	127
 929 001c 5D        		.byte	93
 930 001d 71        		.byte	113
 931 001e 53        		.byte	83
 932 001f 7B        		.byte	123
 933 0020 5F        		.byte	95
 934 0021 46        		.byte	70
 935 0022 5E        		.byte	94
 936 0023 47        		.byte	71
 937 0024 43        		.byte	67
 938 0025 57        		.byte	87
 939 0026 70        		.byte	112
 940 0027 7F        		.byte	127
 941 0028 71        		.byte	113
 942 0029 71        		.byte	113
 943 002a 4D        		.byte	77
 944 002b 7B        		.byte	123
 945 002c 5F        		.byte	95
 946 002d 41        		.byte	65
 947 002e 7F        		.byte	127
 948 002f 6F        		.byte	111
 949 0030 58        		.byte	88
 950 0031 57        		.byte	87
 951 0032 70        		.byte	112
 952 0033 4A        		.byte	74
GAS LISTING /tmp/ccqyO3R8.s 			page 19


 953 0034 7B        		.byte	123
 954 0035 71        		.byte	113
 955 0036 50        		.byte	80
 956 0037 7B        		.byte	123
 957 0038 5F        		.byte	95
 958 0039 7F        		.byte	127
 959 003a 57        		.byte	87
 960 003b 5B        		.byte	91
 961 003c 58        		.byte	88
 962 003d 57        		.byte	87
 963 003e 54        		.byte	84
 964 003f 4A        		.byte	74
 965 0040 80        		.byte	-128
 966 0041 71        		.byte	113
 967 0042 50        		.byte	80
 968 0043 7B        		.byte	123
 969 0044 80        		.byte	-128
 970 0045 47        		.byte	71
 971 0046 57        		.byte	87
 972 0047 5B        		.byte	91
 973 0048 42        		.byte	66
 974 0049 80        		.byte	-128
 975 004a 80        		.byte	-128
 976 004b 80        		.byte	-128
 977 004c 80        		.byte	-128
 978 004d 80        		.byte	-128
 979 004e 80        		.byte	-128
 980 004f 80        		.byte	-128
 981 0050 80        		.byte	-128
 982 0051 80        		.byte	-128
 983 0052 80        		.byte	-128
 984 0053 80        		.byte	-128
 985 0054 80        		.byte	-128
 986 0055 80        		.byte	-128
 987 0056 80        		.byte	-128
 989               	.global	freq_s
 992               	freq_s:
 993 0057 02        		.byte	2
 994 0058 02        		.byte	2
 995 0059 02        		.byte	2
 996 005a 02        		.byte	2
 997 005b 02        		.byte	2
 998 005c 02        		.byte	2
 999 005d 03        		.byte	3
 1000 005e 02        		.byte	2
 1001 005f 03        		.byte	3
 1002 0060 02        		.byte	2
 1003 0061 02        		.byte	2
 1004 0062 03        		.byte	3
 1005 0063 04        		.byte	4
 1006 0064 04        		.byte	4
 1007 0065 03        		.byte	3
 1008 0066 05        		.byte	5
 1009 0067 03        		.byte	3
 1010 0068 05        		.byte	5
 1011 0069 06        		.byte	6
 1012 006a 04        		.byte	4
GAS LISTING /tmp/ccqyO3R8.s 			page 20


 1013 006b 05        		.byte	5
 1014 006c 04        		.byte	4
 1015 006d 04        		.byte	4
 1016 006e 06        		.byte	6
 1017 006f 08        		.byte	8
 1018 0070 09        		.byte	9
 1019 0071 07        		.byte	7
 1020 0072 09        		.byte	9
 1021 0073 07        		.byte	7
 1022 0074 0B        		.byte	11
 1023 0075 09        		.byte	9
 1024 0076 07        		.byte	7
 1025 0077 0A        		.byte	10
 1026 0078 08        		.byte	8
 1027 0079 08        		.byte	8
 1028 007a 0B        		.byte	11
 1029 007b 0F        		.byte	15
 1030 007c 12        		.byte	18
 1031 007d 11        		.byte	17
 1032 007e 12        		.byte	18
 1033 007f 0D        		.byte	13
 1034 0080 16        		.byte	22
 1035 0081 12        		.byte	18
 1036 0082 0D        		.byte	13
 1037 0083 1B        		.byte	27
 1038 0084 19        		.byte	25
 1039 0085 15        		.byte	21
 1040 0086 16        		.byte	22
 1041 0087 1E        		.byte	30
 1042 0088 15        		.byte	21
 1043 0089 25        		.byte	37
 1044 008a 24        		.byte	36
 1045 008b 1B        		.byte	27
 1046 008c 2C        		.byte	44
 1047 008d 24        		.byte	36
 1048 008e 33        		.byte	51
 1049 008f 25        		.byte	37
 1050 0090 29        		.byte	41
 1051 0091 2A        		.byte	42
 1052 0092 2C        		.byte	44
 1053 0093 2D        		.byte	45
 1054 0094 2A        		.byte	42
 1055 0095 4D        		.byte	77
 1056 0096 48        		.byte	72
 1057 0097 36        		.byte	54
 1058 0098 58        		.byte	88
 1059 0099 61        		.byte	97
 1060 009a 39        		.byte	57
 1061 009b 4A        		.byte	74
 1062 009c 52        		.byte	82
 1063 009d 3F        		.byte	63
 1064 009e 7E        		.byte	126
 1065 009f 7E        		.byte	126
 1066 00a0 7E        		.byte	126
 1067 00a1 7E        		.byte	126
 1068 00a2 7E        		.byte	126
 1069 00a3 7E        		.byte	126
GAS LISTING /tmp/ccqyO3R8.s 			page 21


 1070 00a4 7E        		.byte	126
 1071 00a5 7E        		.byte	126
 1072 00a6 7E        		.byte	126
 1073 00a7 7E        		.byte	126
 1074 00a8 7E        		.byte	126
 1075 00a9 7E        		.byte	126
 1076 00aa 7E        		.byte	126
 1077 00ab 7E        		.byte	126
 1079               		.text
 1081               	.Letext0:
 1082               		.ident	"GCC: (GNU) 7.2.0"
 1083               	.global __do_copy_data
 1084               	.global __do_clear_bss
GAS LISTING /tmp/ccqyO3R8.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 util.c
     /tmp/ccqyO3R8.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccqyO3R8.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccqyO3R8.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccqyO3R8.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccqyO3R8.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccqyO3R8.s:115    .text:0000000000000000 voiceQuicklySleep
     /tmp/ccqyO3R8.s:136    .text:0000000000000004 GetFrametimer
                            *COM*:0000000000000002 frametimer
     /tmp/ccqyO3R8.s:177    .text:0000000000000012 GetRandom
     /tmp/ccqyO3R8.s:866    .data:0000000000000000 lfsr
     /tmp/ccqyO3R8.s:237    .text:0000000000000060 __vector_14
     /tmp/ccqyO3R8.s:263    .text:0000000000000062 __vector_16
     /tmp/ccqyO3R8.s:287    .text:0000000000000074 intcont
     /tmp/ccqyO3R8.s:284    .text:0000000000000070 make_zero
                            *COM*:0000000000000002 voiceptr
                            *COM*:0000000000000001 wave
     /tmp/ccqyO3R8.s:430    .text:0000000000000118 voicePlayWave
     /tmp/ccqyO3R8.s:456    .text:0000000000000126 voiceDoBasicSynth
                            *COM*:0000000000000001 speed
     /tmp/ccqyO3R8.s:857    .bss:0000000000000004 wave1.1846
     /tmp/ccqyO3R8.s:854    .bss:0000000000000003 wave0.1845
     /tmp/ccqyO3R8.s:851    .bss:0000000000000002 up.1843
                            *COM*:0000000000000001 speed_rec
                            *COM*:0000000000000001 speed1
     /tmp/ccqyO3R8.s:848    .bss:0000000000000001 up1.1844
                            *COM*:0000000000000001 speed_rec1
                            *COM*:0000000000000001 volume
     /tmp/ccqyO3R8.s:683    .text:000000000000028c voiceNoise
                             .bss:0000000000000000 speedmark.1851
     /tmp/ccqyO3R8.s:730    .text:00000000000002ba ReadButtonMask
                            *COM*:0000000000000001 fade_out_mode
                            *COM*:0000000000000001 fade_in_mode
                            *COM*:0000000000000002 fade_out
                            *COM*:0000000000000002 fade_in
                            *COM*:0000000000000001 mode_button
                            *COM*:0000000000000001 mode
                            *COM*:0000000000000001 volume1
     /tmp/ccqyO3R8.s:902    .data:0000000000000002 freq_rs
     /tmp/ccqyO3R8.s:992    .data:0000000000000057 freq_s

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
