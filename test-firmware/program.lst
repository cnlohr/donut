GAS LISTING /tmp/ccRdBHHk.s 			page 1


   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 107               		.section	.text.startup,"ax",@progbits
 109               	.global	main
 111               	main:
 112               		.stabd	46,0,0
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** #include <avr/pgmspace.h>
   5:main.c        **** #include "util.h"
   6:main.c        **** 
   7:main.c        **** 
   8:main.c        **** register int8_t wave asm("r2");
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** int main()
  12:main.c        **** {
 114               	.LM0:
 115               	.LFBB1:
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
  13:main.c        **** 	CLKPR=0x80;
 121               	.LM1:
 122 0000 80E8      		ldi r24,lo8(-128)
 123 0002 8093 6100 		sts 97,r24
  14:main.c        **** 	CLKPR=0x01;
 125               	.LM2:
 126 0006 81E0      		ldi r24,lo8(1)
 127 0008 8093 6100 		sts 97,r24
  15:main.c        **** 
  16:main.c        **** 	//Set outputs to be: Speaker and TX light.
  17:main.c        **** 	DDRD = (_BV(3) | _BV(5) | _BV(6) | _BV(1) );
 129               	.LM3:
 130 000c 9AE6      		ldi r25,lo8(106)
 131 000e 9AB9      		out 0xa,r25
  18:main.c        **** 	DDRB = _BV(3);
 133               	.LM4:
 134 0010 98E0      		ldi r25,lo8(8)
 135 0012 94B9      		out 0x4,r25
  19:main.c        **** 
  20:main.c        **** 	voiceptr = &voiceQuicklySleep;
 137               	.LM5:
 138 0014 20E0      		ldi r18,lo8(gs(voiceQuicklySleep))
 139 0016 30E0      		ldi r19,hi8(gs(voiceQuicklySleep))
 140 0018 3093 0000 		sts voiceptr+1,r19
 141 001c 2093 0000 		sts voiceptr,r18
  21:main.c        **** 
  22:main.c        **** //_BV(COM0A1) |
GAS LISTING /tmp/ccRdBHHk.s 			page 2


  23:main.c        **** //_BV(COM0B1) | 
  24:main.c        **** 	TCCR0A = _BV(COM0B1) | _BV(COM0A1) | _BV(WGM01) | _BV(WGM00); //Phase correct PWM on TCCR0A, Clear
 143               	.LM6:
 144 0020 93EA      		ldi r25,lo8(-93)
 145 0022 94BD      		out 0x24,r25
  25:main.c        **** 	TCCR0B = _BV(CS00);
 147               	.LM7:
 148 0024 85BD      		out 0x25,r24
  26:main.c        **** 	TIMSK0 |= _BV(TOIE0);// | _BV(OCIE0A);
 150               	.LM8:
 151 0026 8091 6E00 		lds r24,110
 152 002a 8160      		ori r24,lo8(1)
 153 002c 8093 6E00 		sts 110,r24
  27:main.c        **** 	OCR0A = OCR0B = 255;
 155               	.LM9:
 156 0030 8FEF      		ldi r24,lo8(-1)
 157 0032 88BD      		out 0x28,r24
 158 0034 87BD      		out 0x27,r24
  28:main.c        **** 	//DDRD &= ~_BV(5);
  29:main.c        **** 	//DDRD |= _BV(6);
  30:main.c        **** 	//DDRD &= ~_BV(6);
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** 
  34:main.c        **** 	PORTB |= _BV(0) | _BV(1) | _BV(4) | _BV(5);
 160               	.LM10:
 161 0036 85B1      		in r24,0x5
 162 0038 8363      		ori r24,lo8(51)
 163 003a 85B9      		out 0x5,r24
  35:main.c        **** 	PORTC |= 0x3f;
 165               	.LM11:
 166 003c 88B1      		in r24,0x8
 167 003e 8F63      		ori r24,lo8(63)
 168 0040 88B9      		out 0x8,r24
  36:main.c        **** 	PORTD |= _BV(0) | _BV(2) | _BV(4) | _BV(7);
 170               	.LM12:
 171 0042 8BB1      		in r24,0xb
 172 0044 8569      		ori r24,lo8(-107)
 173 0046 8BB9      		out 0xb,r24
  37:main.c        **** 	PORTE |= _BV(3) | _BV(2) | _BV(1);
 175               	.LM13:
 176 0048 8EB1      		in r24,0xe
 177 004a 8E60      		ori r24,lo8(14)
 178 004c 8EB9      		out 0xe,r24
  38:main.c        **** 
  39:main.c        **** 	sei();
 180               	.LM14:
 181               	/* #APP */
 182               	 ;  39 "main.c" 1
 183 004e 7894      		sei
 184               	 ;  0 "" 2
 185               	/* #NOAPP */
 186               	.LBB2:
 187               	.LBB3:
  40:main.c        **** 
  41:main.c        **** 
  42:main.c        **** 
GAS LISTING /tmp/ccRdBHHk.s 			page 3


  43:main.c        **** 	while(1)
  44:main.c        **** 	{
  45:main.c        **** 		uint8_t ts = 0;
  46:main.c        **** 		uint8_t ts1 = 0;
  47:main.c        **** 
  48:main.c        **** 		uint8_t i;
  49:main.c        **** 		uint16_t checkmask = 1;
  50:main.c        **** 
  51:main.c        **** 		if( MENUBUTTONDOWN )
  52:main.c        **** 		{
  53:main.c        **** 				voiceptr = &voiceNoise;
  54:main.c        **** 				speed = 10;
  55:main.c        **** 				volume = GetFrametimer()>>8;
  56:main.c        **** 		}
  57:main.c        **** 		else
  58:main.c        **** 		{
  59:main.c        **** 			uint16_t mask = ReadButtonMask();
  60:main.c        **** 
  61:main.c        **** 			for( i = 0; i < 16; i++ )
  62:main.c        **** 			{
  63:main.c        **** 				if( mask & checkmask ) {
  64:main.c        **** 					if( ts ) 
  65:main.c        **** 						ts1 = i+1;
  66:main.c        **** 					else
  67:main.c        **** 						ts = i+1;
  68:main.c        **** 				}
  69:main.c        **** 				checkmask<<=1;
  70:main.c        **** 			}
  71:main.c        **** 
  72:main.c        **** 			#define BASENOTE 36
  73:main.c        **** 
  74:main.c        **** 			if( ts != 0 )
  75:main.c        **** 			{
  76:main.c        **** 				volume = 100;
  77:main.c        **** 				volume1 = 100;
  78:main.c        **** 
  79:main.c        **** 				speed = freq_s[ts-1+BASENOTE];
  80:main.c        **** 				speed_rec = freq_rs[ts-1+BASENOTE];
  81:main.c        **** 				if( ts1 )
  82:main.c        **** 				{
  83:main.c        **** 					//2 notes.
  84:main.c        **** 					speed1 = freq_s[ts1-1+BASENOTE];
  85:main.c        **** 					speed_rec1 = freq_rs[ts1-1+BASENOTE];
  86:main.c        **** 				}
  87:main.c        **** 				else
  88:main.c        **** 				{
  89:main.c        **** 					//1 note
  90:main.c        **** 					speed1 = 0;
  91:main.c        **** 				}
  92:main.c        **** 				voiceptr = &voiceDoBasicSynth;
  93:main.c        **** 				PORTD &=~_BV(1); //LED
  94:main.c        **** 			}
  95:main.c        **** 			else
  96:main.c        **** 			{
  97:main.c        **** 				//No notes
  98:main.c        **** 				voiceptr = voiceQuicklySleep;
 189               	.LM15:
GAS LISTING /tmp/ccRdBHHk.s 			page 4


 190 0050 E901      		movw r28,r18
  76:main.c        **** 				volume1 = 100;
 192               	.LM16:
 193 0052 94E6      		ldi r25,lo8(100)
 194 0054 D92E      		mov r13,r25
  92:main.c        **** 				PORTD &=~_BV(1); //LED
 196               	.LM17:
 197 0056 00E0      		ldi r16,lo8(gs(voiceDoBasicSynth))
 198 0058 10E0      		ldi r17,hi8(gs(voiceDoBasicSynth))
 199               	.LBE3:
  53:main.c        **** 				speed = 10;
 201               	.LM18:
 202 005a 20E0      		ldi r18,lo8(gs(voiceNoise))
 203 005c E22E      		mov r14,r18
 204 005e 20E0      		ldi r18,hi8(gs(voiceNoise))
 205 0060 F22E      		mov r15,r18
  54:main.c        **** 				volume = GetFrametimer()>>8;
 207               	.LM19:
 208 0062 3AE0      		ldi r19,lo8(10)
 209 0064 C32E      		mov r12,r19
 210               	.L2:
  51:main.c        **** 		{
 212               	.LM20:
 213 0066 1D99      		sbic 0x3,5
 214 0068 00C0      		rjmp .L3
  53:main.c        **** 				speed = 10;
 216               	.LM21:
 217 006a F092 0000 		sts voiceptr+1,r15
 218 006e E092 0000 		sts voiceptr,r14
  54:main.c        **** 				volume = GetFrametimer()>>8;
 220               	.LM22:
 221 0072 C092 0000 		sts speed,r12
  55:main.c        **** 		}
 223               	.LM23:
 224 0076 0E94 0000 		call GetFrametimer
 225 007a 9093 0000 		sts volume,r25
 226 007e 00C0      		rjmp .L2
 227               	.L3:
 228               	.LBB4:
  59:main.c        **** 
 230               	.LM24:
 231 0080 0E94 0000 		call ReadButtonMask
 232 0084 BC01      		movw r22,r24
 233 0086 31E0      		ldi r19,lo8(1)
 234               	.LBE4:
  49:main.c        **** 
 236               	.LM25:
 237 0088 41E0      		ldi r20,lo8(1)
 238 008a 50E0      		ldi r21,0
  46:main.c        **** 
 240               	.LM26:
 241 008c 20E0      		ldi r18,0
  45:main.c        **** 		uint8_t ts1 = 0;
 243               	.LM27:
 244 008e 90E0      		ldi r25,0
 245               	.L6:
 246               	.LBB5:
GAS LISTING /tmp/ccRdBHHk.s 			page 5


  63:main.c        **** 					if( ts ) 
 248               	.LM28:
 249 0090 FA01      		movw r30,r20
 250 0092 E623      		and r30,r22
 251 0094 F723      		and r31,r23
 252 0096 EF2B      		or r30,r31
 253 0098 01F0      		breq .L5
  64:main.c        **** 						ts1 = i+1;
 255               	.LM29:
 256 009a 9923      		tst r25
 257 009c 01F0      		breq .L10
  65:main.c        **** 					else
 259               	.LM30:
 260 009e 232F      		mov r18,r19
 261 00a0 00C0      		rjmp .L5
 262               	.L10:
  67:main.c        **** 				}
 264               	.LM31:
 265 00a2 932F      		mov r25,r19
 266               	.L5:
  69:main.c        **** 			}
 268               	.LM32:
 269 00a4 440F      		lsl r20
 270 00a6 551F      		rol r21
 271 00a8 3F5F      		subi r19,lo8(-(1))
  61:main.c        **** 			{
 273               	.LM33:
 274 00aa 3131      		cpi r19,lo8(17)
 275 00ac 01F4      		brne .L6
  74:main.c        **** 			{
 277               	.LM34:
 278 00ae 9923      		tst r25
 279 00b0 01F0      		breq .L7
  76:main.c        **** 				volume1 = 100;
 281               	.LM35:
 282 00b2 D092 0000 		sts volume,r13
  77:main.c        **** 
 284               	.LM36:
 285 00b6 D092 0000 		sts volume1,r13
  79:main.c        **** 				speed_rec = freq_rs[ts-1+BASENOTE];
 287               	.LM37:
 288 00ba 892F      		mov r24,r25
 289 00bc 90E0      		ldi r25,0
 290 00be 8396      		adiw r24,35
 291 00c0 FC01      		movw r30,r24
 292 00c2 E050      		subi r30,lo8(-(freq_s))
 293 00c4 F040      		sbci r31,hi8(-(freq_s))
 294 00c6 3081      		ld r19,Z
 295 00c8 3093 0000 		sts speed,r19
  80:main.c        **** 				if( ts1 )
 297               	.LM38:
 298 00cc FC01      		movw r30,r24
 299 00ce E050      		subi r30,lo8(-(freq_rs))
 300 00d0 F040      		sbci r31,hi8(-(freq_rs))
 301 00d2 8081      		ld r24,Z
 302 00d4 8093 0000 		sts speed_rec,r24
  81:main.c        **** 				{
GAS LISTING /tmp/ccRdBHHk.s 			page 6


 304               	.LM39:
 305 00d8 2223      		tst r18
 306 00da 01F0      		breq .L8
  84:main.c        **** 					speed_rec1 = freq_rs[ts1-1+BASENOTE];
 308               	.LM40:
 309 00dc 822F      		mov r24,r18
 310 00de 90E0      		ldi r25,0
 311 00e0 8396      		adiw r24,35
 312 00e2 FC01      		movw r30,r24
 313 00e4 E050      		subi r30,lo8(-(freq_s))
 314 00e6 F040      		sbci r31,hi8(-(freq_s))
 315 00e8 2081      		ld r18,Z
 316 00ea 2093 0000 		sts speed1,r18
  85:main.c        **** 				}
 318               	.LM41:
 319 00ee FC01      		movw r30,r24
 320 00f0 E050      		subi r30,lo8(-(freq_rs))
 321 00f2 F040      		sbci r31,hi8(-(freq_rs))
 322 00f4 8081      		ld r24,Z
 323 00f6 8093 0000 		sts speed_rec1,r24
 324 00fa 00C0      		rjmp .L9
 325               	.L8:
  90:main.c        **** 				}
 327               	.LM42:
 328 00fc 1092 0000 		sts speed1,__zero_reg__
 329               	.L9:
  92:main.c        **** 				PORTD &=~_BV(1); //LED
 331               	.LM43:
 332 0100 1093 0000 		sts voiceptr+1,r17
 333 0104 0093 0000 		sts voiceptr,r16
  93:main.c        **** 			}
 335               	.LM44:
 336 0108 5998      		cbi 0xb,1
 337 010a 00C0      		rjmp .L2
 338               	.L7:
 340               	.LM45:
 341 010c D093 0000 		sts voiceptr+1,r29
 342 0110 C093 0000 		sts voiceptr,r28
  99:main.c        **** 				speed = 0;
 344               	.LM46:
 345 0114 1092 0000 		sts speed,__zero_reg__
 100:main.c        **** 				PORTD |= _BV(1); //LED
 347               	.LM47:
 348 0118 599A      		sbi 0xb,1
 349 011a 00C0      		rjmp .L2
 350               	.LBE5:
 351               	.LBE2:
 365               	.Lscope1:
 367               		.stabd	78,0,0
 368               		.comm	speed_rec1,1,1
 369               		.comm	speed1,1,1
 373               		.text
 375               	.Letext0:
 376               		.ident	"GCC: (GNU) 4.9.2"
 377               	.global __do_clear_bss
GAS LISTING /tmp/ccRdBHHk.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccRdBHHk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRdBHHk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRdBHHk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRdBHHk.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRdBHHk.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRdBHHk.s:111    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 speed1
                            *COM*:0000000000000001 speed_rec1

UNDEFINED SYMBOLS
voiceQuicklySleep
voiceptr
voiceDoBasicSynth
voiceNoise
speed
GetFrametimer
volume
ReadButtonMask
volume1
freq_s
freq_rs
speed_rec
__do_clear_bss
GAS LISTING /tmp/ccRdBHHk.s 			page 1


   1               		.file	"util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 110               	.global	voiceQuicklySleep
 112               	voiceQuicklySleep:
 113               		.stabd	46,0,0
   1:util.c        **** #include "util.h"
   2:util.c        **** #include <avr/io.h>
   3:util.c        **** #include <avr/interrupt.h>
   4:util.c        **** #include <util/delay.h>
   5:util.c        **** #include <avr/pgmspace.h>
   6:util.c        **** 
   7:util.c        **** #include "calced_speeds.c"
   8:util.c        **** 
   9:util.c        **** int8_t wave;
  10:util.c        **** 
  11:util.c        **** uint8_t (* volatile voiceptr)();
  12:util.c        **** volatile uint8_t speed;
  13:util.c        **** volatile uint8_t speed_rec;
  14:util.c        **** volatile uint8_t speed1;
  15:util.c        **** volatile uint8_t speed_rec1;
  16:util.c        **** volatile uint8_t volume;
  17:util.c        **** volatile uint8_t volume1;
  18:util.c        **** volatile uint16_t frametimer;
  19:util.c        **** 
  20:util.c        **** uint16_t GetFrametimer() //Make sure it gets frametimer as an atomic operation.
  21:util.c        **** {
  22:util.c        **** 	uint16_t ret;
  23:util.c        **** 	cli();
  24:util.c        **** 	ret = frametimer;
  25:util.c        **** 	sei();
  26:util.c        **** 	return ret;
  27:util.c        **** }
  28:util.c        **** 
  29:util.c        **** uint16_t lfsr = 0xACE1u;  /* Any nonzero start state will work. (from wikipedia) */
  30:util.c        **** 
  31:util.c        **** uint8_t GetRandom()
  32:util.c        **** {
  33:util.c        **** 	/* taps: 16 14 13 11; feedback polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
  34:util.c        **** 	uint8_t   bit  = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5) ) & 1;
  35:util.c        **** 	lfsr = (lfsr >> 1) | (bit << 15);
  36:util.c        **** 	return lfsr;
  37:util.c        **** }
  38:util.c        **** 
  39:util.c        **** 
  40:util.c        **** 
  41:util.c        **** 
  42:util.c        **** ISR( TIMER0_COMPA_vect, ISR_NAKED  )
  43:util.c        **** {
  44:util.c        **** /*	if( wave < 0 )
  45:util.c        **** 	{
  46:util.c        **** 		//Switch the inverting rail.  WARNING: Do we need to put the second rail into high impedance mode
GAS LISTING /tmp/ccRdBHHk.s 			page 2


  47:util.c        **** 	}
  48:util.c        **** 	else
  49:util.c        **** 	{
  50:util.c        **** 		//Switch the inverting rail.  WARNING: Do we need to put the second rail into high impedance mode
  51:util.c        **** */
  52:util.c        **** //	}
  53:util.c        **** 	asm( "reti" );
  54:util.c        **** }
  55:util.c        **** 
  56:util.c        **** 
  57:util.c        **** //		mov r25, r2\n\
  58:util.c        **** 		lsl r2\n\
  59:util.c        **** 		out 0x27,r2 /*OCR0A*/ \n\
  60:util.c        **** 		out 0x28,r2 /*OCR0B*/ \n\
  61:util.c        **** 		brcs cont__\n\
  62:util.c        **** 		cbi 0xa,3 /*DDRD |= _BV(3) */\n\
  63:util.c        **** 		cbi 0x4,3 /*DDRB |= _BV(3) */\n\
  64:util.c        **** cont__:\n\
  65:util.c        **** 		push r0\n\
  66:util.c        **** 
  67:util.c        **** //#define NAKED_T0OVF
  68:util.c        **** 
  69:util.c        **** ISR( TIMER0_OVF_vect, ISR_NAKED )
  70:util.c        **** {
  71:util.c        **** 	asm( "\n\
  72:util.c        **** 		sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
  73:util.c        **** 		rjmp intcont\n\
  74:util.c        **** 		sbic 0x1E, 0	/* If _BV(0) is set, continue to the below code. */ \n\
  75:util.c        **** 		rjmp make_zero\n\
  76:util.c        **** 		sbi 0xb,3 /*PORT |= _BV(3) */\n\
  77:util.c        **** 		sbi 0x5,3 /*PORTB |= _BV(3) */\n\
  78:util.c        **** 		rjmp intcont\n\
  79:util.c        **** make_zero:\n\
  80:util.c        **** 		cbi 0xb,3 /*PORTD &=~_BV(3) */\n\
  81:util.c        **** 		cbi 0x5,3 /*PORTB &=~_BV(3) */\n\
  82:util.c        **** intcont:\n\
  83:util.c        **** 		push r0\n\
  84:util.c        **** 		push r1\n\
  85:util.c        **** 		in r0,63 /*Store SREG*/\n\
  86:util.c        **** 		push r0\n\
  87:util.c        **** 		clr r1\n\
  88:util.c        **** 		push r16\n\
  89:util.c        **** 		push r17\n\
  90:util.c        **** 		push r18\n\
  91:util.c        **** 		push r19\n\
  92:util.c        **** 		push r20\n\
  93:util.c        **** 		push r21\n\
  94:util.c        **** 		push r22\n\
  95:util.c        **** 		push r23\n\
  96:util.c        **** 		push r24\n\
  97:util.c        **** 		push r25\n\
  98:util.c        **** 		push r30\n\
  99:util.c        **** 		push r31\n\
 100:util.c        **** 	");
 101:util.c        **** 
 102:util.c        **** 
 103:util.c        **** 	frametimer++;
GAS LISTING /tmp/ccRdBHHk.s 			page 3


 104:util.c        **** 	/*Ok... We can do whatever we want in here, as long as it's fast and before the end we update
 105:util.c        **** 		OCR0A and OCR0B.  That will cause the actual registers to update AFTER the next cycle. */
 106:util.c        **** 
 107:util.c        **** 	//Handle TIM0 OVR.  This happens at 31kHz.
 108:util.c        **** 	if( !voiceptr() )
 109:util.c        **** 	{
 110:util.c        **** 			//This disables the output drive.
 111:util.c        **** 			DDRB &=~_BV(3);
 112:util.c        **** 			DDRD &=~_BV(3);
 113:util.c        **** 			PORTB |= _BV(3);
 114:util.c        **** 			PORTD |= _BV(3);
 115:util.c        **** 			OCR0A = OCR0B = 255;
 116:util.c        **** 			goto end_int;
 117:util.c        **** 	}
 118:util.c        **** 	else
 119:util.c        **** 	{
 120:util.c        **** 		DDRD |= _BV(3);
 121:util.c        **** 		DDRB |= _BV(3);
 122:util.c        **** 	}
 123:util.c        **** 
 124:util.c        **** 	//Tricky: Detect if we're switching states, if so, need to trigger early-interrupt-handler transit
 125:util.c        **** 	//This data is stored in GPIOR0 so we can operate at the beginning of the next interrupt without i
 126:util.c        **** 	if( wave < 0 )
 127:util.c        **** 	{
 128:util.c        **** 		if( GPIOR0 & _BV(0) )
 129:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 130:util.c        **** 		else
 131:util.c        **** 			GPIOR0 &=~_BV(1);
 132:util.c        **** 		GPIOR0 &= ~_BV(0);
 133:util.c        **** 	}
 134:util.c        **** 	else
 135:util.c        **** 	{
 136:util.c        **** 		if( !(GPIOR0 & _BV(0)) )
 137:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 138:util.c        **** 		else
 139:util.c        **** 			GPIOR0 &=~_BV(1);
 140:util.c        **** 		GPIOR0 |= _BV(0);
 141:util.c        **** 	}
 142:util.c        **** 
 143:util.c        **** 	OCR0A = OCR0B = ((uint8_t)wave)<<1;
 144:util.c        **** end_int:
 145:util.c        **** 	asm( "\
 146:util.c        **** 		pop r31\n\
 147:util.c        **** 		pop r30\n\
 148:util.c        **** 		pop r25\n\
 149:util.c        **** 		pop r24\n\
 150:util.c        **** 		pop r23\n\
 151:util.c        **** 		pop r22\n\
 152:util.c        **** 		pop r21\n\
 153:util.c        **** 		pop r20\n\
 154:util.c        **** 		pop r19\n\
 155:util.c        **** 		pop r18\n\
 156:util.c        **** 		pop r17\n\
 157:util.c        **** 		pop r16\n\
 158:util.c        **** 		pop r0\n\
 159:util.c        **** 		out 63, r0 /*Restore SREG*/\n\
 160:util.c        **** 		pop r1\n\
GAS LISTING /tmp/ccRdBHHk.s 			page 4


 161:util.c        **** 		pop r0\n\
 162:util.c        **** 		reti\n");
 163:util.c        **** }
 164:util.c        **** 
 165:util.c        **** 
 166:util.c        **** 
 167:util.c        **** #ifdef HAS_SAMPLES
 168:util.c        **** #include "samples.c"
 169:util.c        **** const extern int8_t PROGMEM auddat[7981];
 170:util.c        **** uint8_t voicePlayWave()
 171:util.c        **** {
 172:util.c        **** 	static uint16_t sampleCount = 0;
 173:util.c        **** 	wave = pgm_read_byte( &auddat[sampleCount>>2] );
 174:util.c        **** 	if( sampleCount == 32000 )
 175:util.c        **** 	{
 176:util.c        **** 		voiceptr = voiceQuicklySleep;
 177:util.c        **** 		sampleCount = 0;
 178:util.c        **** 	}
 179:util.c        **** 	sampleCount++;
 180:util.c        **** 	return 1;
 181:util.c        **** }
 182:util.c        **** #else
 183:util.c        **** uint8_t voicePlayWave()
 184:util.c        **** {
 185:util.c        **** 	voiceptr = voiceQuicklySleep;
 186:util.c        **** }
 187:util.c        **** 
 188:util.c        **** #endif
 189:util.c        **** 
 190:util.c        **** uint8_t voiceDoBasicSynth()
 191:util.c        **** {
 192:util.c        **** 	int16_t twave;
 193:util.c        **** 	static uint8_t up;
 194:util.c        **** 	static uint8_t up1;
 195:util.c        **** 	static int8_t wave0;
 196:util.c        **** 	static int8_t wave1;
 197:util.c        **** 
 198:util.c        **** 
 199:util.c        **** 	if( !speed )
 200:util.c        **** 	{
 201:util.c        **** 		voiceptr = voiceQuicklySleep;
 202:util.c        **** 		wave0 = wave1 = 0;
 203:util.c        **** 		return 0;
 204:util.c        **** 	}
 205:util.c        **** 
 206:util.c        **** 	twave = wave0;
 207:util.c        **** 	if( up )
 208:util.c        **** 	{
 209:util.c        **** 		twave+=speed;
 210:util.c        **** 		if( twave > speed_rec ) { up = 0; twave = speed_rec - (twave-speed_rec); } //I hope this is right
 211:util.c        **** 	}
 212:util.c        **** 	else
 213:util.c        **** 	{
 214:util.c        **** 		twave-=speed;
 215:util.c        **** 		if( twave < -speed_rec ) { up = 1; twave = -speed_rec - (twave+speed_rec); } //I hope this is rig
 216:util.c        **** 	}
 217:util.c        **** 	wave0 = twave;
GAS LISTING /tmp/ccRdBHHk.s 			page 5


 218:util.c        **** 
 219:util.c        **** 	if( speed1 )
 220:util.c        **** 	{
 221:util.c        **** 		twave = wave1;
 222:util.c        **** 		if( up1 )
 223:util.c        **** 		{
 224:util.c        **** 			twave+=speed1;
 225:util.c        **** 			if( twave > speed_rec1 ) { up1 = 0; twave = speed_rec1 - (twave-speed_rec1); } //I hope this is 
 226:util.c        **** 		}
 227:util.c        **** 		else
 228:util.c        **** 		{
 229:util.c        **** 			twave-=speed1;
 230:util.c        **** 			if( twave < -speed_rec1 ) { up1 = 1; twave = -speed_rec1 - (twave+speed_rec1); } //I hope this i
 231:util.c        **** 		}
 232:util.c        **** 		wave1 = twave;
 233:util.c        **** 		wave = ((wave1*volume)>>8)+((wave0*volume)>>8);
 234:util.c        **** 		return 1;
 235:util.c        **** 	}
 236:util.c        **** 	else
 237:util.c        **** 	{
 238:util.c        **** 		wave = (wave0*volume)>>8;
 239:util.c        **** 		wave1 = 0;
 240:util.c        **** 		return 1;
 241:util.c        **** 	}
 242:util.c        **** }
 243:util.c        **** 
 244:util.c        **** 
 245:util.c        **** 
 246:util.c        **** uint8_t voiceQuicklySleep()
 247:util.c        **** {
 115               	.LM0:
 116               	.LFBB1:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
 248:util.c        **** 	return 0;
 249:util.c        **** }
 122               	.LM1:
 123 0000 80E0      		ldi r24,0
 124 0002 0895      		ret
 126               	.Lscope1:
 128               		.stabd	78,0,0
 130               	.global	GetFrametimer
 132               	GetFrametimer:
 133               		.stabd	46,0,0
  21:util.c        **** 	uint16_t ret;
 135               	.LM2:
 136               	.LFBB2:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  23:util.c        **** 	ret = frametimer;
 142               	.LM3:
 143               	/* #APP */
 144               	 ;  23 "util.c" 1
GAS LISTING /tmp/ccRdBHHk.s 			page 6


 145 0004 F894      		cli
 146               	 ;  0 "" 2
  24:util.c        **** 	sei();
 148               	.LM4:
 149               	/* #NOAPP */
 150 0006 8091 0000 		lds r24,frametimer
 151 000a 9091 0000 		lds r25,frametimer+1
  25:util.c        **** 	return ret;
 153               	.LM5:
 154               	/* #APP */
 155               	 ;  25 "util.c" 1
 156 000e 7894      		sei
 157               	 ;  0 "" 2
  27:util.c        **** 
 159               	.LM6:
 160               	/* #NOAPP */
 161 0010 0895      		ret
 166               	.Lscope2:
 168               		.stabd	78,0,0
 170               	.global	GetRandom
 172               	GetRandom:
 173               		.stabd	46,0,0
  32:util.c        **** 	/* taps: 16 14 13 11; feedback polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
 175               	.LM7:
 176               	.LFBB3:
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 0 */
 180               	.L__stack_usage = 0
  34:util.c        **** 	lfsr = (lfsr >> 1) | (bit << 15);
 182               	.LM8:
 183 0012 2091 0000 		lds r18,lfsr
 184 0016 3091 0000 		lds r19,lfsr+1
 185 001a C901      		movw r24,r18
 186 001c 9695      		lsr r25
 187 001e 8795      		ror r24
 188 0020 9695      		lsr r25
 189 0022 8795      		ror r24
 190 0024 A901      		movw r20,r18
 191 0026 63E0      		ldi r22,3
 192               		1:
 193 0028 5695      		lsr r21
 194 002a 4795      		ror r20
 195 002c 6A95      		dec r22
 196 002e 01F4      		brne 1b
 197 0030 4827      		eor r20,r24
 198 0032 942F      		mov r25,r20
 199 0034 9227      		eor r25,r18
 200 0036 A901      		movw r20,r18
 201 0038 75E0      		ldi r23,5
 202               		1:
 203 003a 5695      		lsr r21
 204 003c 4795      		ror r20
 205 003e 7A95      		dec r23
 206 0040 01F4      		brne 1b
 207 0042 4927      		eor r20,r25
  35:util.c        **** 	return lfsr;
GAS LISTING /tmp/ccRdBHHk.s 			page 7


 209               	.LM9:
 210 0044 4170      		andi r20,1
 211 0046 742F      		mov r23,r20
 212 0048 7795      		ror r23
 213 004a 7727      		clr r23
 214 004c 7795      		ror r23
 215 004e 60E0      		ldi r22,0
 216 0050 3695      		lsr r19
 217 0052 2795      		ror r18
 218 0054 CB01      		movw r24,r22
 219 0056 822B      		or r24,r18
 220 0058 932B      		or r25,r19
 221 005a 9093 0000 		sts lfsr+1,r25
 222 005e 8093 0000 		sts lfsr,r24
  37:util.c        **** 
 224               	.LM10:
 225 0062 0895      		ret
 227               	.Lscope3:
 229               		.stabd	78,0,0
 231               	.global	__vector_14
 233               	__vector_14:
 234               		.stabd	46,0,0
  43:util.c        **** /*	if( wave < 0 )
 236               	.LM11:
 237               	.LFBB4:
 238               	/* prologue: naked */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
  53:util.c        **** }
 243               	.LM12:
 244               	/* #APP */
 245               	 ;  53 "util.c" 1
 246 0064 1895      		reti
 247               	 ;  0 "" 2
 248               	/* epilogue start */
  54:util.c        **** 
 250               	.LM13:
 251               	/* #NOAPP */
 253               	.Lscope4:
 255               		.stabd	78,0,0
 257               	.global	__vector_16
 259               	__vector_16:
 260               		.stabd	46,0,0
  70:util.c        **** 	asm( "\n\
 262               	.LM14:
 263               	.LFBB5:
 264               	/* prologue: naked */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
  71:util.c        **** 		sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
 269               	.LM15:
 270               	/* #APP */
 271               	 ;  71 "util.c" 1
 272               		
 273 0066 F19B      			sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
GAS LISTING /tmp/ccRdBHHk.s 			page 8


 274 0068 00C0      			rjmp intcont
 275 006a F099      			sbic 0x1E, 0	/* If _BV(0) is set, continue to the below code. */ 
 276 006c 00C0      			rjmp make_zero
 277 006e 5B9A      			sbi 0xb,3 /*PORT |= _BV(3) */
 278 0070 2B9A      			sbi 0x5,3 /*PORTB |= _BV(3) */
 279 0072 00C0      			rjmp intcont
 280               	make_zero:
 281 0074 5B98      			cbi 0xb,3 /*PORTD &=~_BV(3) */
 282 0076 2B98      			cbi 0x5,3 /*PORTB &=~_BV(3) */
 283               	intcont:
 284 0078 0F92      			push r0
 285 007a 1F92      			push r1
 286 007c 0FB6      			in r0,63 /*Store SREG*/
 287 007e 0F92      			push r0
 288 0080 1124      			clr r1
 289 0082 0F93      			push r16
 290 0084 1F93      			push r17
 291 0086 2F93      			push r18
 292 0088 3F93      			push r19
 293 008a 4F93      			push r20
 294 008c 5F93      			push r21
 295 008e 6F93      			push r22
 296 0090 7F93      			push r23
 297 0092 8F93      			push r24
 298 0094 9F93      			push r25
 299 0096 EF93      			push r30
 300 0098 FF93      			push r31
 301               		
 302               	 ;  0 "" 2
 103:util.c        **** 	/*Ok... We can do whatever we want in here, as long as it's fast and before the end we update
 304               	.LM16:
 305               	/* #NOAPP */
 306 009a 8091 0000 		lds r24,frametimer
 307 009e 9091 0000 		lds r25,frametimer+1
 308 00a2 0196      		adiw r24,1
 309 00a4 9093 0000 		sts frametimer+1,r25
 310 00a8 8093 0000 		sts frametimer,r24
 108:util.c        **** 	{
 312               	.LM17:
 313 00ac E091 0000 		lds r30,voiceptr
 314 00b0 F091 0000 		lds r31,voiceptr+1
 315 00b4 0995      		icall
 316 00b6 8111      		cpse r24,__zero_reg__
 317 00b8 00C0      		rjmp .L6
 111:util.c        **** 			DDRD &=~_BV(3);
 319               	.LM18:
 320 00ba 2398      		cbi 0x4,3
 112:util.c        **** 			PORTB |= _BV(3);
 322               	.LM19:
 323 00bc 5398      		cbi 0xa,3
 113:util.c        **** 			PORTD |= _BV(3);
 325               	.LM20:
 326 00be 2B9A      		sbi 0x5,3
 114:util.c        **** 			OCR0A = OCR0B = 255;
 328               	.LM21:
 329 00c0 5B9A      		sbi 0xb,3
 115:util.c        **** 			goto end_int;
GAS LISTING /tmp/ccRdBHHk.s 			page 9


 331               	.LM22:
 332 00c2 8FEF      		ldi r24,lo8(-1)
 333 00c4 88BD      		out 0x28,r24
 334 00c6 87BD      		out 0x27,r24
 116:util.c        **** 	}
 336               	.LM23:
 337 00c8 00C0      		rjmp .L7
 338               	.L6:
 120:util.c        **** 		DDRB |= _BV(3);
 340               	.LM24:
 341 00ca 539A      		sbi 0xa,3
 121:util.c        **** 	}
 343               	.LM25:
 344 00cc 239A      		sbi 0x4,3
 126:util.c        **** 	{
 346               	.LM26:
 347 00ce 8091 0000 		lds r24,wave
 348 00d2 87FF      		sbrs r24,7
 349 00d4 00C0      		rjmp .L8
 128:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 351               	.LM27:
 352 00d6 F09B      		sbis 0x1e,0
 353 00d8 00C0      		rjmp .L9
 129:util.c        **** 		else
 355               	.LM28:
 356 00da F19A      		sbi 0x1e,1
 357 00dc 00C0      		rjmp .L10
 358               	.L9:
 131:util.c        **** 		GPIOR0 &= ~_BV(0);
 360               	.LM29:
 361 00de F198      		cbi 0x1e,1
 362               	.L10:
 132:util.c        **** 	}
 364               	.LM30:
 365 00e0 F098      		cbi 0x1e,0
 366 00e2 00C0      		rjmp .L11
 367               	.L8:
 136:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 369               	.LM31:
 370 00e4 F099      		sbic 0x1e,0
 371 00e6 00C0      		rjmp .L12
 137:util.c        **** 		else
 373               	.LM32:
 374 00e8 F19A      		sbi 0x1e,1
 375 00ea 00C0      		rjmp .L13
 376               	.L12:
 139:util.c        **** 		GPIOR0 |= _BV(0);
 378               	.LM33:
 379 00ec F198      		cbi 0x1e,1
 380               	.L13:
 140:util.c        **** 	}
 382               	.LM34:
 383 00ee F09A      		sbi 0x1e,0
 384               	.L11:
 143:util.c        **** end_int:
 386               	.LM35:
 387 00f0 8091 0000 		lds r24,wave
GAS LISTING /tmp/ccRdBHHk.s 			page 10


 388 00f4 880F      		lsl r24
 389 00f6 88BD      		out 0x28,r24
 390 00f8 87BD      		out 0x27,r24
 391               	.L7:
 145:util.c        **** 		pop r31\n\
 393               	.LM36:
 394               	/* #APP */
 395               	 ;  145 "util.c" 1
 396 00fa FF91      				pop r31
 397 00fc EF91      			pop r30
 398 00fe 9F91      			pop r25
 399 0100 8F91      			pop r24
 400 0102 7F91      			pop r23
 401 0104 6F91      			pop r22
 402 0106 5F91      			pop r21
 403 0108 4F91      			pop r20
 404 010a 3F91      			pop r19
 405 010c 2F91      			pop r18
 406 010e 1F91      			pop r17
 407 0110 0F91      			pop r16
 408 0112 0F90      			pop r0
 409 0114 0FBE      			out 63, r0 /*Restore SREG*/
 410 0116 1F90      			pop r1
 411 0118 0F90      			pop r0
 412 011a 1895      			reti
 413               	
 414               	 ;  0 "" 2
 415               	/* epilogue start */
 163:util.c        **** 
 417               	.LM37:
 418               	/* #NOAPP */
 420               	.Lscope5:
 422               		.stabd	78,0,0
 424               	.global	voicePlayWave
 426               	voicePlayWave:
 427               		.stabd	46,0,0
 184:util.c        **** 	voiceptr = voiceQuicklySleep;
 429               	.LM38:
 430               	.LFBB6:
 431               	/* prologue: function */
 432               	/* frame size = 0 */
 433               	/* stack size = 0 */
 434               	.L__stack_usage = 0
 185:util.c        **** }
 436               	.LM39:
 437 011c 80E0      		ldi r24,lo8(gs(voiceQuicklySleep))
 438 011e 90E0      		ldi r25,hi8(gs(voiceQuicklySleep))
 439 0120 9093 0000 		sts voiceptr+1,r25
 440 0124 8093 0000 		sts voiceptr,r24
 186:util.c        **** 
 442               	.LM40:
 443 0128 0895      		ret
 445               	.Lscope6:
 447               		.stabd	78,0,0
 449               	.global	voiceDoBasicSynth
 451               	voiceDoBasicSynth:
 452               		.stabd	46,0,0
GAS LISTING /tmp/ccRdBHHk.s 			page 11


 191:util.c        **** 	int16_t twave;
 454               	.LM41:
 455               	.LFBB7:
 456 012a 0F93      		push r16
 457 012c 1F93      		push r17
 458               	/* prologue: function */
 459               	/* frame size = 0 */
 460               	/* stack size = 2 */
 461               	.L__stack_usage = 2
 199:util.c        **** 	{
 463               	.LM42:
 464 012e 8091 0000 		lds r24,speed
 465 0132 8111      		cpse r24,__zero_reg__
 466 0134 00C0      		rjmp .L16
 201:util.c        **** 		wave0 = wave1 = 0;
 468               	.LM43:
 469 0136 20E0      		ldi r18,lo8(gs(voiceQuicklySleep))
 470 0138 30E0      		ldi r19,hi8(gs(voiceQuicklySleep))
 471 013a 3093 0000 		sts voiceptr+1,r19
 472 013e 2093 0000 		sts voiceptr,r18
 202:util.c        **** 		return 0;
 474               	.LM44:
 475 0142 1092 0000 		sts wave1.1854,__zero_reg__
 476 0146 1092 0000 		sts wave0.1853,__zero_reg__
 203:util.c        **** 	}
 478               	.LM45:
 479 014a 00C0      		rjmp .L17
 480               	.L16:
 206:util.c        **** 	if( up )
 482               	.LM46:
 483 014c 2091 0000 		lds r18,wave0.1853
 484 0150 022E      		mov __tmp_reg__,r18
 485 0152 000C      		lsl r0
 486 0154 330B      		sbc r19,r19
 207:util.c        **** 	{
 488               	.LM47:
 489 0156 8091 0000 		lds r24,up.1851
 490 015a 8823      		tst r24
 491 015c 01F0      		breq .L18
 209:util.c        **** 		if( twave > speed_rec ) { up = 0; twave = speed_rec - (twave-speed_rec); } //I hope this is right
 493               	.LM48:
 494 015e 8091 0000 		lds r24,speed
 495 0162 280F      		add r18,r24
 496 0164 311D      		adc r19,__zero_reg__
 210:util.c        **** 	}
 498               	.LM49:
 499 0166 8091 0000 		lds r24,speed_rec
 500 016a 90E0      		ldi r25,0
 501 016c 8217      		cp r24,r18
 502 016e 9307      		cpc r25,r19
 503 0170 04F4      		brge .L19
 210:util.c        **** 	}
 505               	.LM50:
 506 0172 1092 0000 		sts up.1851,__zero_reg__
 507 0176 4091 0000 		lds r20,speed_rec
 508 017a 8091 0000 		lds r24,speed_rec
 509 017e 90E0      		ldi r25,0
GAS LISTING /tmp/ccRdBHHk.s 			page 12


 510 0180 BC01      		movw r22,r24
 511 0182 621B      		sub r22,r18
 512 0184 730B      		sbc r23,r19
 513 0186 9B01      		movw r18,r22
 514 0188 240F      		add r18,r20
 515 018a 311D      		adc r19,__zero_reg__
 516 018c 00C0      		rjmp .L19
 517               	.L18:
 214:util.c        **** 		if( twave < -speed_rec ) { up = 1; twave = -speed_rec - (twave+speed_rec); } //I hope this is rig
 519               	.LM51:
 520 018e 8091 0000 		lds r24,speed
 521 0192 281B      		sub r18,r24
 522 0194 3109      		sbc r19,__zero_reg__
 215:util.c        **** 	}
 524               	.LM52:
 525 0196 8091 0000 		lds r24,speed_rec
 526 019a 90E0      		ldi r25,0
 527 019c 9195      		neg r25
 528 019e 8195      		neg r24
 529 01a0 9109      		sbc r25,__zero_reg__
 530 01a2 2817      		cp r18,r24
 531 01a4 3907      		cpc r19,r25
 532 01a6 04F4      		brge .L19
 215:util.c        **** 	}
 534               	.LM53:
 535 01a8 81E0      		ldi r24,lo8(1)
 536 01aa 8093 0000 		sts up.1851,r24
 537 01ae 8091 0000 		lds r24,speed_rec
 538 01b2 9091 0000 		lds r25,speed_rec
 539 01b6 290F      		add r18,r25
 540 01b8 311D      		adc r19,__zero_reg__
 541 01ba 90E0      		ldi r25,0
 542 01bc 9195      		neg r25
 543 01be 8195      		neg r24
 544 01c0 9109      		sbc r25,__zero_reg__
 545 01c2 AC01      		movw r20,r24
 546 01c4 421B      		sub r20,r18
 547 01c6 530B      		sbc r21,r19
 548 01c8 9A01      		movw r18,r20
 549               	.L19:
 217:util.c        **** 
 551               	.LM54:
 552 01ca 622F      		mov r22,r18
 553 01cc 2093 0000 		sts wave0.1853,r18
 219:util.c        **** 	{
 555               	.LM55:
 556 01d0 8091 0000 		lds r24,speed1
 557 01d4 8823      		tst r24
 558 01d6 01F4      		brne .+2
 559 01d8 00C0      		rjmp .L20
 221:util.c        **** 		if( up1 )
 561               	.LM56:
 562 01da 8091 0000 		lds r24,wave1.1854
 563 01de 082E      		mov __tmp_reg__,r24
 564 01e0 000C      		lsl r0
 565 01e2 990B      		sbc r25,r25
 222:util.c        **** 		{
GAS LISTING /tmp/ccRdBHHk.s 			page 13


 567               	.LM57:
 568 01e4 2091 0000 		lds r18,up1.1852
 569 01e8 2223      		tst r18
 570 01ea 01F0      		breq .L21
 224:util.c        **** 			if( twave > speed_rec1 ) { up1 = 0; twave = speed_rec1 - (twave-speed_rec1); } //I hope this is 
 572               	.LM58:
 573 01ec 2091 0000 		lds r18,speed1
 574 01f0 8C01      		movw r16,r24
 575 01f2 020F      		add r16,r18
 576 01f4 111D      		adc r17,__zero_reg__
 225:util.c        **** 		}
 578               	.LM59:
 579 01f6 4091 0000 		lds r20,speed_rec1
 580 01fa 50E0      		ldi r21,0
 581 01fc 4017      		cp r20,r16
 582 01fe 5107      		cpc r21,r17
 583 0200 04F4      		brge .L22
 225:util.c        **** 		}
 585               	.LM60:
 586 0202 1092 0000 		sts up1.1852,__zero_reg__
 587 0206 4091 0000 		lds r20,speed_rec1
 588 020a 2091 0000 		lds r18,speed_rec1
 589 020e 30E0      		ldi r19,0
 590 0210 C901      		movw r24,r18
 591 0212 801B      		sub r24,r16
 592 0214 910B      		sbc r25,r17
 593 0216 8C01      		movw r16,r24
 594 0218 040F      		add r16,r20
 595 021a 111D      		adc r17,__zero_reg__
 596 021c 00C0      		rjmp .L22
 597               	.L21:
 229:util.c        **** 			if( twave < -speed_rec1 ) { up1 = 1; twave = -speed_rec1 - (twave+speed_rec1); } //I hope this i
 599               	.LM61:
 600 021e 2091 0000 		lds r18,speed1
 601 0222 8C01      		movw r16,r24
 602 0224 021B      		sub r16,r18
 603 0226 1109      		sbc r17,__zero_reg__
 230:util.c        **** 		}
 605               	.LM62:
 606 0228 2091 0000 		lds r18,speed_rec1
 607 022c 30E0      		ldi r19,0
 608 022e 3195      		neg r19
 609 0230 2195      		neg r18
 610 0232 3109      		sbc r19,__zero_reg__
 611 0234 0217      		cp r16,r18
 612 0236 1307      		cpc r17,r19
 613 0238 04F4      		brge .L22
 230:util.c        **** 		}
 615               	.LM63:
 616 023a 21E0      		ldi r18,lo8(1)
 617 023c 2093 0000 		sts up1.1852,r18
 618 0240 2091 0000 		lds r18,speed_rec1
 619 0244 3091 0000 		lds r19,speed_rec1
 620 0248 A801      		movw r20,r16
 621 024a 430F      		add r20,r19
 622 024c 511D      		adc r21,__zero_reg__
 623 024e 30E0      		ldi r19,0
GAS LISTING /tmp/ccRdBHHk.s 			page 14


 624 0250 8827      		clr r24
 625 0252 9927      		clr r25
 626 0254 821B      		sub r24,r18
 627 0256 930B      		sbc r25,r19
 628 0258 8C01      		movw r16,r24
 629 025a 041B      		sub r16,r20
 630 025c 150B      		sbc r17,r21
 631               	.L22:
 232:util.c        **** 		wave = ((wave1*volume)>>8)+((wave0*volume)>>8);
 633               	.LM64:
 634 025e 0093 0000 		sts wave1.1854,r16
 233:util.c        **** 		return 1;
 636               	.LM65:
 637 0262 2091 0000 		lds r18,volume
 638 0266 3091 0000 		lds r19,volume
 639 026a 0203      		mulsu r16,r18
 640 026c C001      		movw r24,r0
 641 026e 1124      		clr __zero_reg__
 642 0270 6303      		mulsu r22,r19
 643 0272 9001      		movw r18,r0
 644 0274 1124      		clr __zero_reg__
 645 0276 832F      		mov r24,r19
 646 0278 890F      		add r24,r25
 647 027a 8093 0000 		sts wave,r24
 648 027e 00C0      		rjmp .L23
 649               	.L20:
 238:util.c        **** 		wave1 = 0;
 651               	.LM66:
 652 0280 3091 0000 		lds r19,volume
 653 0284 2303      		mulsu r18,r19
 654 0286 9001      		movw r18,r0
 655 0288 1124      		clr __zero_reg__
 656 028a 3093 0000 		sts wave,r19
 239:util.c        **** 		return 1;
 658               	.LM67:
 659 028e 1092 0000 		sts wave1.1854,__zero_reg__
 660               	.L23:
 240:util.c        **** 	}
 662               	.LM68:
 663 0292 81E0      		ldi r24,lo8(1)
 664               	.L17:
 665               	/* epilogue start */
 242:util.c        **** 
 667               	.LM69:
 668 0294 1F91      		pop r17
 669 0296 0F91      		pop r16
 670 0298 0895      		ret
 678               	.Lscope7:
 680               		.stabd	78,0,0
 682               	.global	voiceNoise
 684               	voiceNoise:
 685               		.stabd	46,0,0
 250:util.c        **** 
 251:util.c        **** uint8_t voiceNoise()
 252:util.c        **** {
 687               	.LM70:
 688               	.LFBB8:
GAS LISTING /tmp/ccRdBHHk.s 			page 15


 689               	/* prologue: function */
 690               	/* frame size = 0 */
 691               	/* stack size = 0 */
 692               	.L__stack_usage = 0
 253:util.c        **** 	static uint8_t speedmark;
 254:util.c        **** 	speedmark++;
 694               	.LM71:
 695 029a 8091 0000 		lds r24,speedmark.1859
 696 029e 8F5F      		subi r24,lo8(-(1))
 697 02a0 8093 0000 		sts speedmark.1859,r24
 255:util.c        **** 
 256:util.c        **** 	if( speedmark == speed )
 699               	.LM72:
 700 02a4 9091 0000 		lds r25,speed
 701 02a8 8913      		cpse r24,r25
 702 02aa 00C0      		rjmp .L26
 257:util.c        **** 	{
 258:util.c        **** 		wave = (((int8_t)GetRandom()) * volume)>>8;
 704               	.LM73:
 705 02ac 0E94 0000 		call GetRandom
 706 02b0 2091 0000 		lds r18,volume
 707 02b4 382F      		mov r19,r24
 708 02b6 3203      		mulsu r19,r18
 709 02b8 C001      		movw r24,r0
 710 02ba 1124      		clr __zero_reg__
 711 02bc 9093 0000 		sts wave,r25
 259:util.c        **** 		speedmark = 0;
 713               	.LM74:
 714 02c0 1092 0000 		sts speedmark.1859,__zero_reg__
 715               	.L26:
 260:util.c        **** 	}
 261:util.c        **** 	return 1;
 262:util.c        **** }
 717               	.LM75:
 718 02c4 81E0      		ldi r24,lo8(1)
 719 02c6 0895      		ret
 724               	.Lscope8:
 726               		.stabd	78,0,0
 728               	.global	ReadButtonMask
 730               	ReadButtonMask:
 731               		.stabd	46,0,0
 263:util.c        **** 
 264:util.c        **** 
 265:util.c        **** uint16_t ReadButtonMask()
 266:util.c        **** {
 733               	.LM76:
 734               	.LFBB9:
 735               	/* prologue: function */
 736               	/* frame size = 0 */
 737               	/* stack size = 0 */
 738               	.L__stack_usage = 0
 267:util.c        **** 	uint16_t ret = 0;
 268:util.c        **** 	if( BUTTON0DOWN ) ret |= _BV(0);
 740               	.LM77:
 741 02c8 26B1      		in r18,0x6
 742 02ca 2295      		swap r18
 743 02cc 2695      		lsr r18
GAS LISTING /tmp/ccRdBHHk.s 			page 16


 744 02ce 2770      		andi r18,lo8(7)
 745 02d0 31E0      		ldi r19,lo8(1)
 746 02d2 2327      		eor r18,r19
 267:util.c        **** 	uint16_t ret = 0;
 748               	.LM78:
 749 02d4 822F      		mov r24,r18
 750 02d6 8170      		andi r24,1
 751 02d8 90E0      		ldi r25,0
 269:util.c        **** 	if( BUTTON1DOWN ) ret |= _BV(1);
 753               	.LM79:
 754 02da 4A9B      		sbis 0x9,2
 756               	.LM80:
 757 02dc 8260      		ori r24,2
 758               	.L28:
 270:util.c        **** 	if( BUTTON2DOWN ) ret |= _BV(2);
 760               	.LM81:
 761 02de 4C9B      		sbis 0x9,4
 763               	.LM82:
 764 02e0 8460      		ori r24,4
 765               	.L29:
 271:util.c        **** 	if( BUTTON3DOWN ) ret |= _BV(3);
 767               	.LM83:
 768 02e2 619B      		sbis 0xc,1
 770               	.LM84:
 771 02e4 8860      		ori r24,8
 772               	.L30:
 272:util.c        **** 	if( BUTTON4DOWN ) ret |= _BV(4);
 774               	.LM85:
 775 02e6 4F9B      		sbis 0x9,7
 777               	.LM86:
 778 02e8 8061      		ori r24,16
 779               	.L31:
 273:util.c        **** 	if( BUTTON5DOWN ) ret |= _BV(5);
 781               	.LM87:
 782 02ea 189B      		sbis 0x3,0
 784               	.LM88:
 785 02ec 8062      		ori r24,32
 786               	.L32:
 274:util.c        **** 	if( BUTTON6DOWN ) ret |= _BV(6);
 788               	.LM89:
 789 02ee 199B      		sbis 0x3,1
 791               	.LM90:
 792 02f0 8064      		ori r24,64
 793               	.L33:
 275:util.c        **** 	if( BUTTON7DOWN ) ret |= _BV(7);
 795               	.LM91:
 796 02f2 1C9B      		sbis 0x3,4
 798               	.LM92:
 799 02f4 8068      		ori r24,128
 800               	.L34:
 276:util.c        **** 	if( BUTTON8DOWN ) ret |= _BV(8);
 802               	.LM93:
 803 02f6 629B      		sbis 0xc,2
 805               	.LM94:
 806 02f8 9160      		ori r25,1
 807               	.L35:
 277:util.c        **** 	if( BUTTON9DOWN ) ret |= _BV(9);
GAS LISTING /tmp/ccRdBHHk.s 			page 17


 809               	.LM95:
 810 02fa 639B      		sbis 0xc,3
 812               	.LM96:
 813 02fc 9260      		ori r25,2
 814               	.L36:
 278:util.c        **** 	if( BUTTON10DOWN ) ret |= _BV(10);
 816               	.LM97:
 817 02fe 329B      		sbis 0x6,2
 819               	.LM98:
 820 0300 9460      		ori r25,4
 821               	.L37:
 279:util.c        **** 	if( BUTTON11DOWN ) ret |= _BV(11);
 823               	.LM99:
 824 0302 339B      		sbis 0x6,3
 826               	.LM100:
 827 0304 9860      		ori r25,8
 828               	.L38:
 280:util.c        **** 	if( BUTTON12DOWN ) ret |= _BV(12);
 830               	.LM101:
 831 0306 349B      		sbis 0x6,4
 833               	.LM102:
 834 0308 9061      		ori r25,16
 835               	.L39:
 281:util.c        **** 	return ret;
 282:util.c        **** }
 837               	.LM103:
 838 030a 0895      		ret
 843               	.Lscope9:
 845               		.stabd	78,0,0
 846               		.local	speedmark.1859
 847               		.comm	speedmark.1859,1,1
 848               		.local	up1.1852
 849               		.comm	up1.1852,1,1
 850               		.local	up.1851
 851               		.comm	up.1851,1,1
 852               		.local	wave0.1853
 853               		.comm	wave0.1853,1,1
 854               		.local	wave1.1854
 855               		.comm	wave1.1854,1,1
 856               	.global	lfsr
 857               		.data
 860               	lfsr:
 861 0000 E1AC      		.word	-21279
 862               		.comm	frametimer,2,1
 863               		.comm	volume1,1,1
 864               		.comm	volume,1,1
 865               		.comm	speed_rec1,1,1
 866               		.comm	speed1,1,1
 867               		.comm	speed_rec,1,1
 868               		.comm	speed,1,1
 869               		.comm	voiceptr,2,1
 870               		.comm	wave,1,1
 871               	.global	freq_rs
 874               	freq_rs:
 875 0002 77        		.byte	119
 876 0003 71        		.byte	113
 877 0004 6A        		.byte	106
GAS LISTING /tmp/ccRdBHHk.s 			page 18


 878 0005 64        		.byte	100
 879 0006 5F        		.byte	95
 880 0007 59        		.byte	89
 881 0008 54        		.byte	84
 882 0009 50        		.byte	80
 883 000a 4B        		.byte	75
 884 000b 47        		.byte	71
 885 000c 43        		.byte	67
 886 000d 40        		.byte	64
 887 000e 77        		.byte	119
 888 000f 71        		.byte	113
 889 0010 6A        		.byte	106
 890 0011 64        		.byte	100
 891 0012 5F        		.byte	95
 892 0013 59        		.byte	89
 893 0014 54        		.byte	84
 894 0015 50        		.byte	80
 895 0016 71        		.byte	113
 896 0017 47        		.byte	71
 897 0018 43        		.byte	67
 898 0019 5F        		.byte	95
 899 001a 77        		.byte	119
 900 001b 71        		.byte	113
 901 001c 50        		.byte	80
 902 001d 4B        		.byte	75
 903 001e 47        		.byte	71
 904 001f 70        		.byte	112
 905 0020 6A        		.byte	106
 906 0021 50        		.byte	80
 907 0022 5E        		.byte	94
 908 0023 47        		.byte	71
 909 0024 43        		.byte	67
 910 0025 5F        		.byte	95
 911 0026 77        		.byte	119
 912 0027 71        		.byte	113
 913 0028 5D        		.byte	93
 914 0029 71        		.byte	113
 915 002a 53        		.byte	83
 916 002b 7B        		.byte	123
 917 002c 5F        		.byte	95
 918 002d 46        		.byte	70
 919 002e 5E        		.byte	94
 920 002f 47        		.byte	71
 921 0030 43        		.byte	67
 922 0031 57        		.byte	87
 923 0032 70        		.byte	112
 924 0033 78        		.byte	120
 925 0034 71        		.byte	113
 926 0035 71        		.byte	113
 927 0036 4D        		.byte	77
 928 0037 7B        		.byte	123
 929 0038 5F        		.byte	95
 930 0039 41        		.byte	65
 931 003a 50        		.byte	80
 932 003b 6F        		.byte	111
 933 003c 58        		.byte	88
 934 003d 57        		.byte	87
GAS LISTING /tmp/ccRdBHHk.s 			page 19


 935 003e 70        		.byte	112
 936 003f 4A        		.byte	74
 937 0040 7B        		.byte	123
 938 0041 71        		.byte	113
 939 0042 50        		.byte	80
 940 0043 7B        		.byte	123
 941 0044 42        		.byte	66
 942 0045 7A        		.byte	122
 943 0046 57        		.byte	87
 944 0047 5B        		.byte	91
 945 0048 58        		.byte	88
 946 0049 57        		.byte	87
 947               	.global	freq_s
 950               	freq_s:
 951 004a 01        		.byte	1
 952 004b 01        		.byte	1
 953 004c 01        		.byte	1
 954 004d 01        		.byte	1
 955 004e 01        		.byte	1
 956 004f 01        		.byte	1
 957 0050 01        		.byte	1
 958 0051 01        		.byte	1
 959 0052 01        		.byte	1
 960 0053 01        		.byte	1
 961 0054 01        		.byte	1
 962 0055 01        		.byte	1
 963 0056 02        		.byte	2
 964 0057 02        		.byte	2
 965 0058 02        		.byte	2
 966 0059 02        		.byte	2
 967 005a 02        		.byte	2
 968 005b 02        		.byte	2
 969 005c 02        		.byte	2
 970 005d 02        		.byte	2
 971 005e 03        		.byte	3
 972 005f 02        		.byte	2
 973 0060 02        		.byte	2
 974 0061 03        		.byte	3
 975 0062 04        		.byte	4
 976 0063 04        		.byte	4
 977 0064 03        		.byte	3
 978 0065 03        		.byte	3
 979 0066 03        		.byte	3
 980 0067 05        		.byte	5
 981 0068 05        		.byte	5
 982 0069 04        		.byte	4
 983 006a 05        		.byte	5
 984 006b 04        		.byte	4
 985 006c 04        		.byte	4
 986 006d 06        		.byte	6
 987 006e 08        		.byte	8
 988 006f 08        		.byte	8
 989 0070 07        		.byte	7
 990 0071 09        		.byte	9
 991 0072 07        		.byte	7
 992 0073 0B        		.byte	11
 993 0074 09        		.byte	9
GAS LISTING /tmp/ccRdBHHk.s 			page 20


 994 0075 07        		.byte	7
 995 0076 0A        		.byte	10
 996 0077 08        		.byte	8
 997 0078 08        		.byte	8
 998 0079 0B        		.byte	11
 999 007a 0F        		.byte	15
 1000 007b 11        		.byte	17
 1001 007c 11        		.byte	17
 1002 007d 12        		.byte	18
 1003 007e 0D        		.byte	13
 1004 007f 16        		.byte	22
 1005 0080 12        		.byte	18
 1006 0081 0D        		.byte	13
 1007 0082 11        		.byte	17
 1008 0083 19        		.byte	25
 1009 0084 15        		.byte	21
 1010 0085 16        		.byte	22
 1011 0086 1E        		.byte	30
 1012 0087 15        		.byte	21
 1013 0088 25        		.byte	37
 1014 0089 24        		.byte	36
 1015 008a 1B        		.byte	27
 1016 008b 2C        		.byte	44
 1017 008c 19        		.byte	25
 1018 008d 31        		.byte	49
 1019 008e 25        		.byte	37
 1020 008f 29        		.byte	41
 1021 0090 2A        		.byte	42
 1022 0091 2C        		.byte	44
 1035               		.text
 1037               	.Letext0:
 1038               		.ident	"GCC: (GNU) 4.9.2"
 1039               	.global __do_copy_data
 1040               	.global __do_clear_bss
GAS LISTING /tmp/ccRdBHHk.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 util.c
     /tmp/ccRdBHHk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRdBHHk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRdBHHk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRdBHHk.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRdBHHk.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRdBHHk.s:112    .text:0000000000000000 voiceQuicklySleep
     /tmp/ccRdBHHk.s:132    .text:0000000000000004 GetFrametimer
                            *COM*:0000000000000002 frametimer
     /tmp/ccRdBHHk.s:172    .text:0000000000000012 GetRandom
     /tmp/ccRdBHHk.s:860    .data:0000000000000000 lfsr
     /tmp/ccRdBHHk.s:233    .text:0000000000000064 __vector_14
     /tmp/ccRdBHHk.s:259    .text:0000000000000066 __vector_16
     /tmp/ccRdBHHk.s:283    .text:0000000000000078 intcont
     /tmp/ccRdBHHk.s:280    .text:0000000000000074 make_zero
                            *COM*:0000000000000002 voiceptr
                            *COM*:0000000000000001 wave
     /tmp/ccRdBHHk.s:426    .text:000000000000011c voicePlayWave
     /tmp/ccRdBHHk.s:451    .text:000000000000012a voiceDoBasicSynth
                            *COM*:0000000000000001 speed
     /tmp/ccRdBHHk.s:853    .bss:0000000000000004 wave1.1854
     /tmp/ccRdBHHk.s:851    .bss:0000000000000003 wave0.1853
     /tmp/ccRdBHHk.s:849    .bss:0000000000000002 up.1851
                            *COM*:0000000000000001 speed_rec
                            *COM*:0000000000000001 speed1
     /tmp/ccRdBHHk.s:847    .bss:0000000000000001 up1.1852
                            *COM*:0000000000000001 speed_rec1
                            *COM*:0000000000000001 volume
     /tmp/ccRdBHHk.s:684    .text:000000000000029a voiceNoise
                             .bss:0000000000000000 speedmark.1859
     /tmp/ccRdBHHk.s:730    .text:00000000000002c8 ReadButtonMask
                            *COM*:0000000000000001 volume1
     /tmp/ccRdBHHk.s:874    .data:0000000000000002 freq_rs
     /tmp/ccRdBHHk.s:950    .data:000000000000004a freq_s

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
