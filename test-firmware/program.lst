GAS LISTING /tmp/cclTvlN6.s 			page 1


   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 107               		.section	.text.startup,"ax",@progbits
 109               	.global	main
 111               	main:
 112               		.stabd	46,0,0
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** #include <avr/pgmspace.h>
   5:main.c        **** #include "util.h"
   6:main.c        **** 
   7:main.c        **** 
   8:main.c        **** register int8_t wave asm("r2");
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** int main()
  12:main.c        **** {
 114               	.LM0:
 115               	.LFBB1:
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
  13:main.c        **** 	CLKPR=0x80;
 121               	.LM1:
 122 0000 80E8      		ldi r24,lo8(-128)
 123 0002 8093 6100 		sts 97,r24
  14:main.c        **** 	CLKPR=0x01;
 125               	.LM2:
 126 0006 81E0      		ldi r24,lo8(1)
 127 0008 8093 6100 		sts 97,r24
  15:main.c        **** 
  16:main.c        **** 	//Set outputs to be: Speaker and TX light.
  17:main.c        **** 	DDRD = (_BV(3) | _BV(5) | _BV(6) | _BV(1) );
 129               	.LM3:
 130 000c 9AE6      		ldi r25,lo8(106)
 131 000e 9AB9      		out 0xa,r25
  18:main.c        **** 	DDRB = _BV(3);
 133               	.LM4:
 134 0010 98E0      		ldi r25,lo8(8)
 135 0012 94B9      		out 0x4,r25
  19:main.c        **** 
  20:main.c        **** 	voiceptr = &voiceQuicklySleep;
 137               	.LM5:
 138 0014 20E0      		ldi r18,lo8(gs(voiceQuicklySleep))
 139 0016 30E0      		ldi r19,hi8(gs(voiceQuicklySleep))
 140 0018 3093 0000 		sts voiceptr+1,r19
 141 001c 2093 0000 		sts voiceptr,r18
  21:main.c        **** 
  22:main.c        **** //_BV(COM0A1) |
GAS LISTING /tmp/cclTvlN6.s 			page 2


  23:main.c        **** //_BV(COM0B1) | 
  24:main.c        **** 	TCCR0A = _BV(COM0B1) | _BV(COM0A1) | _BV(WGM01) | _BV(WGM00); //Phase correct PWM on TCCR0A, Clear
 143               	.LM6:
 144 0020 93EA      		ldi r25,lo8(-93)
 145 0022 94BD      		out 0x24,r25
  25:main.c        **** 	TCCR0B = _BV(CS00);
 147               	.LM7:
 148 0024 85BD      		out 0x25,r24
  26:main.c        **** 	TIMSK0 |= _BV(TOIE0);// | _BV(OCIE0A);
 150               	.LM8:
 151 0026 8091 6E00 		lds r24,110
 152 002a 8160      		ori r24,lo8(1)
 153 002c 8093 6E00 		sts 110,r24
  27:main.c        **** 	OCR0A = OCR0B = 255;
 155               	.LM9:
 156 0030 8FEF      		ldi r24,lo8(-1)
 157 0032 88BD      		out 0x28,r24
 158 0034 87BD      		out 0x27,r24
  28:main.c        **** 	//DDRD &= ~_BV(5);
  29:main.c        **** 	//DDRD |= _BV(6);
  30:main.c        **** 	//DDRD &= ~_BV(6);
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** 
  34:main.c        **** 	PORTB |= _BV(0) | _BV(1) | _BV(4) | _BV(5);
 160               	.LM10:
 161 0036 85B1      		in r24,0x5
 162 0038 8363      		ori r24,lo8(51)
 163 003a 85B9      		out 0x5,r24
  35:main.c        **** 	PORTC |= 0x3f;
 165               	.LM11:
 166 003c 88B1      		in r24,0x8
 167 003e 8F63      		ori r24,lo8(63)
 168 0040 88B9      		out 0x8,r24
  36:main.c        **** 	PORTD |= _BV(0) | _BV(2) | _BV(4) | _BV(7);
 170               	.LM12:
 171 0042 8BB1      		in r24,0xb
 172 0044 8569      		ori r24,lo8(-107)
 173 0046 8BB9      		out 0xb,r24
  37:main.c        **** 	PORTE |= _BV(3) | _BV(2) | _BV(1);
 175               	.LM13:
 176 0048 8EB1      		in r24,0xe
 177 004a 8E60      		ori r24,lo8(14)
 178 004c 8EB9      		out 0xe,r24
  38:main.c        **** 
  39:main.c        **** 	sei();
 180               	.LM14:
 181               	/* #APP */
 182               	 ;  39 "main.c" 1
 183 004e 7894      		sei
 184               	 ;  0 "" 2
 185               	/* #NOAPP */
 186               	.LBB2:
  40:main.c        **** 
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** 	while(1)
GAS LISTING /tmp/cclTvlN6.s 			page 3


  44:main.c        **** 	{
  45:main.c        **** 		uint8_t ts = 0;
  46:main.c        **** 		uint8_t ts1 = 0;
  47:main.c        **** 
  48:main.c        **** 		uint8_t i;
  49:main.c        **** 		uint16_t checkmask = 1;
  50:main.c        **** 
  51:main.c        **** 		uint16_t mask = ReadButtonMask();
  52:main.c        **** 
  53:main.c        **** 		for( i = 0; i < 16; i++ )
  54:main.c        **** 		{
  55:main.c        **** 			if( mask & checkmask ) {
  56:main.c        **** 				if( ts ) 
  57:main.c        **** 					ts1 = i+1;
  58:main.c        **** 				else
  59:main.c        **** 					ts = i+1;
  60:main.c        **** 			}
  61:main.c        **** 			checkmask<<=1;
  62:main.c        **** 		}
  63:main.c        **** 
  64:main.c        **** #define BEND 24
  65:main.c        **** 
  66:main.c        **** 		if( ts != 0 )
  67:main.c        **** 		{
  68:main.c        **** 			speed = freq_s[ts-1+BEND];
  69:main.c        **** 			speed_rec = freq_rs[ts-1+BEND];
  70:main.c        **** 			if( ts1 )
  71:main.c        **** 			{
  72:main.c        **** 				speed1 = freq_s[ts1-1+BEND];
  73:main.c        **** 				speed_rec1 = freq_rs[ts1-1+BEND];
  74:main.c        **** 			}
  75:main.c        **** 			else
  76:main.c        **** 			{
  77:main.c        **** 				speed1 = 0;
  78:main.c        **** 			}
  79:main.c        **** 			voiceptr = &voiceDoBasicSynth;
 188               	.LM15:
 189 0050 C0E0      		ldi r28,lo8(gs(voiceDoBasicSynth))
 190 0052 D0E0      		ldi r29,hi8(gs(voiceDoBasicSynth))
 191               	.L2:
  51:main.c        **** 
 193               	.LM16:
 194 0054 0E94 0000 		call ReadButtonMask
 195 0058 BC01      		movw r22,r24
 196 005a 31E0      		ldi r19,lo8(1)
  49:main.c        **** 
 198               	.LM17:
 199 005c 41E0      		ldi r20,lo8(1)
 200 005e 50E0      		ldi r21,0
  46:main.c        **** 
 202               	.LM18:
 203 0060 20E0      		ldi r18,0
  45:main.c        **** 		uint8_t ts1 = 0;
 205               	.LM19:
 206 0062 90E0      		ldi r25,0
 207               	.L4:
  55:main.c        **** 				if( ts ) 
GAS LISTING /tmp/cclTvlN6.s 			page 4


 209               	.LM20:
 210 0064 FA01      		movw r30,r20
 211 0066 E623      		and r30,r22
 212 0068 F723      		and r31,r23
 213 006a EF2B      		or r30,r31
 214 006c 01F0      		breq .L3
  56:main.c        **** 					ts1 = i+1;
 216               	.LM21:
 217 006e 9923      		tst r25
 218 0070 01F0      		breq .L9
  57:main.c        **** 				else
 220               	.LM22:
 221 0072 232F      		mov r18,r19
 222 0074 00C0      		rjmp .L3
 223               	.L9:
  59:main.c        **** 			}
 225               	.LM23:
 226 0076 932F      		mov r25,r19
 227               	.L3:
  61:main.c        **** 		}
 229               	.LM24:
 230 0078 440F      		lsl r20
 231 007a 551F      		rol r21
 232 007c 3F5F      		subi r19,lo8(-(1))
  53:main.c        **** 		{
 234               	.LM25:
 235 007e 3131      		cpi r19,lo8(17)
 236 0080 01F4      		brne .L4
  66:main.c        **** 		{
 238               	.LM26:
 239 0082 9923      		tst r25
 240 0084 01F0      		breq .L5
  68:main.c        **** 			speed_rec = freq_rs[ts-1+BEND];
 242               	.LM27:
 243 0086 892F      		mov r24,r25
 244 0088 90E0      		ldi r25,0
 245 008a 4796      		adiw r24,23
 246 008c FC01      		movw r30,r24
 247 008e E050      		subi r30,lo8(-(freq_s))
 248 0090 F040      		sbci r31,hi8(-(freq_s))
 249 0092 3081      		ld r19,Z
 250 0094 3093 0000 		sts speed,r19
  69:main.c        **** 			if( ts1 )
 252               	.LM28:
 253 0098 FC01      		movw r30,r24
 254 009a E050      		subi r30,lo8(-(freq_rs))
 255 009c F040      		sbci r31,hi8(-(freq_rs))
 256 009e 8081      		ld r24,Z
 257 00a0 8093 0000 		sts speed_rec,r24
  70:main.c        **** 			{
 259               	.LM29:
 260 00a4 2223      		tst r18
 261 00a6 01F0      		breq .L6
  72:main.c        **** 				speed_rec1 = freq_rs[ts1-1+BEND];
 263               	.LM30:
 264 00a8 822F      		mov r24,r18
 265 00aa 90E0      		ldi r25,0
GAS LISTING /tmp/cclTvlN6.s 			page 5


 266 00ac 4796      		adiw r24,23
 267 00ae FC01      		movw r30,r24
 268 00b0 E050      		subi r30,lo8(-(freq_s))
 269 00b2 F040      		sbci r31,hi8(-(freq_s))
 270 00b4 2081      		ld r18,Z
 271 00b6 2093 0000 		sts speed1,r18
  73:main.c        **** 			}
 273               	.LM31:
 274 00ba FC01      		movw r30,r24
 275 00bc E050      		subi r30,lo8(-(freq_rs))
 276 00be F040      		sbci r31,hi8(-(freq_rs))
 277 00c0 8081      		ld r24,Z
 278 00c2 8093 0000 		sts speed_rec1,r24
 279 00c6 00C0      		rjmp .L7
 280               	.L6:
  77:main.c        **** 			}
 282               	.LM32:
 283 00c8 1092 0000 		sts speed1,__zero_reg__
 284               	.L7:
 286               	.LM33:
 287 00cc D093 0000 		sts voiceptr+1,r29
 288 00d0 C093 0000 		sts voiceptr,r28
  80:main.c        **** 			PORTD &=~_BV(1); //LED
 290               	.LM34:
 291 00d4 5998      		cbi 0xb,1
 292 00d6 00C0      		rjmp .L2
 293               	.L5:
  81:main.c        **** 		}
  82:main.c        **** 		else
  83:main.c        **** 		{
  84:main.c        **** 			speed = 0;
 295               	.LM35:
 296 00d8 1092 0000 		sts speed,__zero_reg__
  85:main.c        **** 			PORTD |= _BV(1); //LED
 298               	.LM36:
 299 00dc 599A      		sbi 0xb,1
 300 00de 00C0      		rjmp .L2
 301               	.LBE2:
 307               	.Lscope1:
 309               		.stabd	78,0,0
 310               		.comm	speed_rec1,1,1
 311               		.comm	speed1,1,1
 315               		.text
 317               	.Letext0:
 318               		.ident	"GCC: (GNU) 4.9.2"
 319               	.global __do_clear_bss
GAS LISTING /tmp/cclTvlN6.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cclTvlN6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclTvlN6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclTvlN6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclTvlN6.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclTvlN6.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclTvlN6.s:111    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 speed1
                            *COM*:0000000000000001 speed_rec1

UNDEFINED SYMBOLS
voiceQuicklySleep
voiceptr
voiceDoBasicSynth
ReadButtonMask
freq_s
speed
freq_rs
speed_rec
__do_clear_bss
GAS LISTING /tmp/cclTvlN6.s 			page 1


   1               		.file	"util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 110               	.global	voiceQuicklySleep
 112               	voiceQuicklySleep:
 113               		.stabd	46,0,0
   1:util.c        **** #include "util.h"
   2:util.c        **** #include <avr/io.h>
   3:util.c        **** #include <avr/interrupt.h>
   4:util.c        **** #include <util/delay.h>
   5:util.c        **** #include <avr/pgmspace.h>
   6:util.c        **** 
   7:util.c        **** #include "calced_speeds.c"
   8:util.c        **** 
   9:util.c        **** int8_t wave;
  10:util.c        **** 
  11:util.c        **** uint8_t (* volatile voiceptr)();
  12:util.c        **** volatile uint8_t speed;
  13:util.c        **** volatile uint8_t speed_rec;
  14:util.c        **** volatile uint8_t speed1;
  15:util.c        **** volatile uint8_t speed_rec1;
  16:util.c        **** 
  17:util.c        **** //https://stackoverflow.com/questions/1558321/how-do-i-generate-random-numbers-in-a-microcontroller
  18:util.c        **** 
  19:util.c        **** uint8_t lfsr = 231;
  20:util.c        **** 
  21:util.c        **** uint8_t GetRandom()
  22:util.c        **** {
  23:util.c        **** 	uint8_t input_bit = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1;
  24:util.c        **** 	lfsr = (lfsr >> 1) | (input_bit << 7);
  25:util.c        **** 	return lfsr;
  26:util.c        **** }
  27:util.c        **** 
  28:util.c        **** 
  29:util.c        **** 
  30:util.c        **** 
  31:util.c        **** ISR( TIMER0_COMPA_vect, ISR_NAKED  )
  32:util.c        **** {
  33:util.c        **** /*	if( wave < 0 )
  34:util.c        **** 	{
  35:util.c        **** 		//Switch the inverting rail.  WARNING: Do we need to put the second rail into high impedance mode
  36:util.c        **** 	}
  37:util.c        **** 	else
  38:util.c        **** 	{
  39:util.c        **** 		//Switch the inverting rail.  WARNING: Do we need to put the second rail into high impedance mode
  40:util.c        **** */
  41:util.c        **** //	}
  42:util.c        **** 	asm( "reti" );
  43:util.c        **** }
  44:util.c        **** 
  45:util.c        **** 
  46:util.c        **** //		mov r25, r2\n\
GAS LISTING /tmp/cclTvlN6.s 			page 2


  47:util.c        **** 		lsl r2\n\
  48:util.c        **** 		out 0x27,r2 /*OCR0A*/ \n\
  49:util.c        **** 		out 0x28,r2 /*OCR0B*/ \n\
  50:util.c        **** 		brcs cont__\n\
  51:util.c        **** 		cbi 0xa,3 /*DDRD |= _BV(3) */\n\
  52:util.c        **** 		cbi 0x4,3 /*DDRB |= _BV(3) */\n\
  53:util.c        **** cont__:\n\
  54:util.c        **** 		push r0\n\
  55:util.c        **** 
  56:util.c        **** //#define NAKED_T0OVF
  57:util.c        **** 
  58:util.c        **** ISR( TIMER0_OVF_vect, ISR_NAKED )
  59:util.c        **** {
  60:util.c        **** 	asm( "\n\
  61:util.c        **** 		sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
  62:util.c        **** 		rjmp intcont\n\
  63:util.c        **** 		sbic 0x1E, 0	/* If _BV(0) is set, continue to the below code. */ \n\
  64:util.c        **** 		rjmp make_zero\n\
  65:util.c        **** 		sbi 0xb,3 /*PORT |= _BV(3) */\n\
  66:util.c        **** 		sbi 0x5,3 /*PORTB |= _BV(3) */\n\
  67:util.c        **** 		rjmp intcont\n\
  68:util.c        **** make_zero:\n\
  69:util.c        **** 		cbi 0xb,3 /*PORTD &=~_BV(3) */\n\
  70:util.c        **** 		cbi 0x5,3 /*PORTB &=~_BV(3) */\n\
  71:util.c        **** intcont:\n\
  72:util.c        **** 		push r0\n\
  73:util.c        **** 		push r1\n\
  74:util.c        **** 		in r0,63 /*Store SREG*/\n\
  75:util.c        **** 		push r0\n\
  76:util.c        **** 		clr r1\n\
  77:util.c        **** 		push r18\n\
  78:util.c        **** 		push r19\n\
  79:util.c        **** 		push r20\n\
  80:util.c        **** 		push r21\n\
  81:util.c        **** 		push r22\n\
  82:util.c        **** 		push r23\n\
  83:util.c        **** 		push r24\n\
  84:util.c        **** 		push r25\n\
  85:util.c        **** 		push r30\n\
  86:util.c        **** 		push r31\n\
  87:util.c        **** 	");
  88:util.c        **** 
  89:util.c        **** 	/*Ok... We can do whatever we want in here, as long as it's fast and before the end we update
  90:util.c        **** 		OCR0A and OCR0B.  That will cause the actual registers to update AFTER the next cycle. */
  91:util.c        **** 
  92:util.c        **** 	//Handle TIM0 OVR.  This happens at 31kHz.
  93:util.c        **** 	if( !voiceptr() )
  94:util.c        **** 	{
  95:util.c        **** 			//This disables the output drive.
  96:util.c        **** 			DDRB &=~_BV(3);
  97:util.c        **** 			DDRD &=~_BV(3);
  98:util.c        **** 			PORTB |= _BV(3);
  99:util.c        **** 			PORTD |= _BV(3);
 100:util.c        **** 			OCR0A = OCR0B = 255;
 101:util.c        **** 			goto end_int;
 102:util.c        **** 	}
 103:util.c        **** 	else
GAS LISTING /tmp/cclTvlN6.s 			page 3


 104:util.c        **** 	{
 105:util.c        **** 		DDRD |= _BV(3);
 106:util.c        **** 		DDRB |= _BV(3);
 107:util.c        **** 	}
 108:util.c        **** 
 109:util.c        **** 	//Tricky: Detect if we're switching states, if so, need to trigger early-interrupt-handler transit
 110:util.c        **** 	//This data is stored in GPIOR0 so we can operate at the beginning of the next interrupt without i
 111:util.c        **** 	if( wave < 0 )
 112:util.c        **** 	{
 113:util.c        **** 		if( GPIOR0 & _BV(0) )
 114:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 115:util.c        **** 		else
 116:util.c        **** 			GPIOR0 &=~_BV(1);
 117:util.c        **** 		GPIOR0 &= ~_BV(0);
 118:util.c        **** 	}
 119:util.c        **** 	else
 120:util.c        **** 	{
 121:util.c        **** 		if( !(GPIOR0 & _BV(0)) )
 122:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 123:util.c        **** 		else
 124:util.c        **** 			GPIOR0 &=~_BV(1);
 125:util.c        **** 		GPIOR0 |= _BV(0);
 126:util.c        **** 	}
 127:util.c        **** 
 128:util.c        **** 	OCR0A = OCR0B = ((uint8_t)wave)<<1;
 129:util.c        **** end_int:
 130:util.c        **** 	asm( "\
 131:util.c        **** 		pop r31\n\
 132:util.c        **** 		pop r30\n\
 133:util.c        **** 		pop r25\n\
 134:util.c        **** 		pop r24\n\
 135:util.c        **** 		pop r23\n\
 136:util.c        **** 		pop r22\n\
 137:util.c        **** 		pop r21\n\
 138:util.c        **** 		pop r20\n\
 139:util.c        **** 		pop r19\n\
 140:util.c        **** 		pop r18\n\
 141:util.c        **** 		pop r0\n\
 142:util.c        **** 		out 63, r0 /*Restore SREG*/\n\
 143:util.c        **** 		pop r1\n\
 144:util.c        **** 		pop r0\n\
 145:util.c        **** 		reti\n");
 146:util.c        **** }
 147:util.c        **** 
 148:util.c        **** 
 149:util.c        **** 
 150:util.c        **** #ifdef HAS_SAMPLES
 151:util.c        **** #include "samples.c"
 152:util.c        **** const extern int8_t PROGMEM auddat[7981];
 153:util.c        **** uint8_t voicePlayWave()
 154:util.c        **** {
 155:util.c        **** 	static uint16_t sampleCount = 0;
 156:util.c        **** 	wave = pgm_read_byte( &auddat[sampleCount>>2] );
 157:util.c        **** 	if( sampleCount == 32000 )
 158:util.c        **** 	{
 159:util.c        **** 		voiceptr = voiceQuicklySleep;
 160:util.c        **** 		sampleCount = 0;
GAS LISTING /tmp/cclTvlN6.s 			page 4


 161:util.c        **** 	}
 162:util.c        **** 	sampleCount++;
 163:util.c        **** 	return 1;
 164:util.c        **** }
 165:util.c        **** #else
 166:util.c        **** uint8_t voicePlayWave()
 167:util.c        **** {
 168:util.c        **** 	voiceptr = voiceQuicklySleep;
 169:util.c        **** }
 170:util.c        **** 
 171:util.c        **** #endif
 172:util.c        **** 
 173:util.c        **** uint8_t voiceDoBasicSynth()
 174:util.c        **** {
 175:util.c        **** 	int16_t twave;
 176:util.c        **** 	static uint8_t up;
 177:util.c        **** 	static uint8_t up1;
 178:util.c        **** 	static int8_t wave0;
 179:util.c        **** 	static int8_t wave1;
 180:util.c        **** 
 181:util.c        **** 
 182:util.c        **** 	if( !speed )
 183:util.c        **** 	{
 184:util.c        **** 		voiceptr = voiceQuicklySleep;
 185:util.c        **** 		wave0 = wave1 = 0;
 186:util.c        **** 		return 0;
 187:util.c        **** 	}
 188:util.c        **** 
 189:util.c        **** 	twave = wave0;
 190:util.c        **** 	if( up )
 191:util.c        **** 	{
 192:util.c        **** 		twave+=speed;
 193:util.c        **** 		if( twave > speed_rec ) { up = 0; twave = speed_rec - (twave-speed_rec); } //I hope this is right
 194:util.c        **** 	}
 195:util.c        **** 	else
 196:util.c        **** 	{
 197:util.c        **** 		twave-=speed;
 198:util.c        **** 		if( twave < -speed_rec ) { up = 1; twave = -speed_rec - (twave+speed_rec); } //I hope this is rig
 199:util.c        **** 	}
 200:util.c        **** 	wave0 = twave;
 201:util.c        **** 
 202:util.c        **** 	if( speed1 )
 203:util.c        **** 	{
 204:util.c        **** 		twave = wave1;
 205:util.c        **** 		if( up1 )
 206:util.c        **** 		{
 207:util.c        **** 			twave+=speed1;
 208:util.c        **** 			if( twave > speed_rec1 ) { up1 = 0; twave = speed_rec1 - (twave-speed_rec1); } //I hope this is 
 209:util.c        **** 		}
 210:util.c        **** 		else
 211:util.c        **** 		{
 212:util.c        **** 			twave-=speed1;
 213:util.c        **** 			if( twave < -speed_rec1 ) { up1 = 1; twave = -speed_rec1 - (twave+speed_rec1); } //I hope this i
 214:util.c        **** 		}
 215:util.c        **** 		wave1 = twave;
 216:util.c        **** 		wave = (wave1+wave0)/2;
 217:util.c        **** 		return 1;
GAS LISTING /tmp/cclTvlN6.s 			page 5


 218:util.c        **** 	}
 219:util.c        **** 	else
 220:util.c        **** 	{
 221:util.c        **** 		wave = wave0;
 222:util.c        **** 		wave1 = 0;
 223:util.c        **** 		return 1;
 224:util.c        **** 	}
 225:util.c        **** }
 226:util.c        **** 
 227:util.c        **** 
 228:util.c        **** 
 229:util.c        **** uint8_t voiceQuicklySleep()
 230:util.c        **** {
 115               	.LM0:
 116               	.LFBB1:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
 231:util.c        **** 	return 0;
 232:util.c        **** }
 122               	.LM1:
 123 0000 80E0      		ldi r24,0
 124 0002 0895      		ret
 126               	.Lscope1:
 128               		.stabd	78,0,0
 130               	.global	GetRandom
 132               	GetRandom:
 133               		.stabd	46,0,0
  22:util.c        **** 	uint8_t input_bit = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1;
 135               	.LM2:
 136               	.LFBB2:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  23:util.c        **** 	lfsr = (lfsr >> 1) | (input_bit << 7);
 142               	.LM3:
 143 0004 9091 0000 		lds r25,lfsr
 144 0008 292F      		mov r18,r25
 145 000a 2295      		swap r18
 146 000c 2F70      		andi r18,lo8(15)
 147 000e 892F      		mov r24,r25
 148 0010 8695      		lsr r24
 149 0012 8695      		lsr r24
 150 0014 8695      		lsr r24
 151 0016 8227      		eor r24,r18
 152 0018 292F      		mov r18,r25
 153 001a 2695      		lsr r18
 154 001c 2695      		lsr r18
 155 001e 2927      		eor r18,r25
 156 0020 8227      		eor r24,r18
  24:util.c        **** 	return lfsr;
 158               	.LM4:
 159 0022 8795      		ror r24
 160 0024 8827      		clr r24
 161 0026 8795      		ror r24
GAS LISTING /tmp/cclTvlN6.s 			page 6


 162 0028 9695      		lsr r25
 163 002a 892B      		or r24,r25
 164 002c 8093 0000 		sts lfsr,r24
  26:util.c        **** 
 166               	.LM5:
 167 0030 0895      		ret
 169               	.Lscope2:
 171               		.stabd	78,0,0
 173               	.global	__vector_14
 175               	__vector_14:
 176               		.stabd	46,0,0
  32:util.c        **** /*	if( wave < 0 )
 178               	.LM6:
 179               	.LFBB3:
 180               	/* prologue: naked */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
  42:util.c        **** }
 185               	.LM7:
 186               	/* #APP */
 187               	 ;  42 "util.c" 1
 188 0032 1895      		reti
 189               	 ;  0 "" 2
 190               	/* epilogue start */
  43:util.c        **** 
 192               	.LM8:
 193               	/* #NOAPP */
 195               	.Lscope3:
 197               		.stabd	78,0,0
 199               	.global	__vector_16
 201               	__vector_16:
 202               		.stabd	46,0,0
  59:util.c        **** 	asm( "\n\
 204               	.LM9:
 205               	.LFBB4:
 206               	/* prologue: naked */
 207               	/* frame size = 0 */
 208               	/* stack size = 0 */
 209               	.L__stack_usage = 0
  60:util.c        **** 		sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
 211               	.LM10:
 212               	/* #APP */
 213               	 ;  60 "util.c" 1
 214               		
 215 0034 F19B      			sbis 0x1E, 1	/* If we aren't supposed to do any operations, don't skip the jump to normal operati
 216 0036 00C0      			rjmp intcont
 217 0038 F099      			sbic 0x1E, 0	/* If _BV(0) is set, continue to the below code. */ 
 218 003a 00C0      			rjmp make_zero
 219 003c 5B9A      			sbi 0xb,3 /*PORT |= _BV(3) */
 220 003e 2B9A      			sbi 0x5,3 /*PORTB |= _BV(3) */
 221 0040 00C0      			rjmp intcont
 222               	make_zero:
 223 0042 5B98      			cbi 0xb,3 /*PORTD &=~_BV(3) */
 224 0044 2B98      			cbi 0x5,3 /*PORTB &=~_BV(3) */
 225               	intcont:
 226 0046 0F92      			push r0
GAS LISTING /tmp/cclTvlN6.s 			page 7


 227 0048 1F92      			push r1
 228 004a 0FB6      			in r0,63 /*Store SREG*/
 229 004c 0F92      			push r0
 230 004e 1124      			clr r1
 231 0050 2F93      			push r18
 232 0052 3F93      			push r19
 233 0054 4F93      			push r20
 234 0056 5F93      			push r21
 235 0058 6F93      			push r22
 236 005a 7F93      			push r23
 237 005c 8F93      			push r24
 238 005e 9F93      			push r25
 239 0060 EF93      			push r30
 240 0062 FF93      			push r31
 241               		
 242               	 ;  0 "" 2
  93:util.c        **** 	{
 244               	.LM11:
 245               	/* #NOAPP */
 246 0064 E091 0000 		lds r30,voiceptr
 247 0068 F091 0000 		lds r31,voiceptr+1
 248 006c 0995      		icall
 249 006e 8111      		cpse r24,__zero_reg__
 250 0070 00C0      		rjmp .L5
  96:util.c        **** 			DDRD &=~_BV(3);
 252               	.LM12:
 253 0072 2398      		cbi 0x4,3
  97:util.c        **** 			PORTB |= _BV(3);
 255               	.LM13:
 256 0074 5398      		cbi 0xa,3
  98:util.c        **** 			PORTD |= _BV(3);
 258               	.LM14:
 259 0076 2B9A      		sbi 0x5,3
  99:util.c        **** 			OCR0A = OCR0B = 255;
 261               	.LM15:
 262 0078 5B9A      		sbi 0xb,3
 100:util.c        **** 			goto end_int;
 264               	.LM16:
 265 007a 8FEF      		ldi r24,lo8(-1)
 266 007c 88BD      		out 0x28,r24
 267 007e 87BD      		out 0x27,r24
 101:util.c        **** 	}
 269               	.LM17:
 270 0080 00C0      		rjmp .L6
 271               	.L5:
 105:util.c        **** 		DDRB |= _BV(3);
 273               	.LM18:
 274 0082 539A      		sbi 0xa,3
 106:util.c        **** 	}
 276               	.LM19:
 277 0084 239A      		sbi 0x4,3
 111:util.c        **** 	{
 279               	.LM20:
 280 0086 8091 0000 		lds r24,wave
 281 008a 87FF      		sbrs r24,7
 282 008c 00C0      		rjmp .L7
 113:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
GAS LISTING /tmp/cclTvlN6.s 			page 8


 284               	.LM21:
 285 008e F09B      		sbis 0x1e,0
 286 0090 00C0      		rjmp .L8
 114:util.c        **** 		else
 288               	.LM22:
 289 0092 F19A      		sbi 0x1e,1
 290 0094 00C0      		rjmp .L9
 291               	.L8:
 116:util.c        **** 		GPIOR0 &= ~_BV(0);
 293               	.LM23:
 294 0096 F198      		cbi 0x1e,1
 295               	.L9:
 117:util.c        **** 	}
 297               	.LM24:
 298 0098 F098      		cbi 0x1e,0
 299 009a 00C0      		rjmp .L10
 300               	.L7:
 121:util.c        **** 			GPIOR0 |= _BV(1); //If transition, trigger.
 302               	.LM25:
 303 009c F099      		sbic 0x1e,0
 304 009e 00C0      		rjmp .L11
 122:util.c        **** 		else
 306               	.LM26:
 307 00a0 F19A      		sbi 0x1e,1
 308 00a2 00C0      		rjmp .L12
 309               	.L11:
 124:util.c        **** 		GPIOR0 |= _BV(0);
 311               	.LM27:
 312 00a4 F198      		cbi 0x1e,1
 313               	.L12:
 125:util.c        **** 	}
 315               	.LM28:
 316 00a6 F09A      		sbi 0x1e,0
 317               	.L10:
 128:util.c        **** end_int:
 319               	.LM29:
 320 00a8 8091 0000 		lds r24,wave
 321 00ac 880F      		lsl r24
 322 00ae 88BD      		out 0x28,r24
 323 00b0 87BD      		out 0x27,r24
 324               	.L6:
 130:util.c        **** 		pop r31\n\
 326               	.LM30:
 327               	/* #APP */
 328               	 ;  130 "util.c" 1
 329 00b2 FF91      				pop r31
 330 00b4 EF91      			pop r30
 331 00b6 9F91      			pop r25
 332 00b8 8F91      			pop r24
 333 00ba 7F91      			pop r23
 334 00bc 6F91      			pop r22
 335 00be 5F91      			pop r21
 336 00c0 4F91      			pop r20
 337 00c2 3F91      			pop r19
 338 00c4 2F91      			pop r18
 339 00c6 0F90      			pop r0
 340 00c8 0FBE      			out 63, r0 /*Restore SREG*/
GAS LISTING /tmp/cclTvlN6.s 			page 9


 341 00ca 1F90      			pop r1
 342 00cc 0F90      			pop r0
 343 00ce 1895      			reti
 344               	
 345               	 ;  0 "" 2
 346               	/* epilogue start */
 146:util.c        **** 
 348               	.LM31:
 349               	/* #NOAPP */
 351               	.Lscope4:
 353               		.stabd	78,0,0
 355               	.global	voicePlayWave
 357               	voicePlayWave:
 358               		.stabd	46,0,0
 167:util.c        **** 	voiceptr = voiceQuicklySleep;
 360               	.LM32:
 361               	.LFBB5:
 362               	/* prologue: function */
 363               	/* frame size = 0 */
 364               	/* stack size = 0 */
 365               	.L__stack_usage = 0
 168:util.c        **** }
 367               	.LM33:
 368 00d0 80E0      		ldi r24,lo8(gs(voiceQuicklySleep))
 369 00d2 90E0      		ldi r25,hi8(gs(voiceQuicklySleep))
 370 00d4 9093 0000 		sts voiceptr+1,r25
 371 00d8 8093 0000 		sts voiceptr,r24
 169:util.c        **** 
 373               	.LM34:
 374 00dc 0895      		ret
 376               	.Lscope5:
 378               		.stabd	78,0,0
 380               	.global	voiceDoBasicSynth
 382               	voiceDoBasicSynth:
 383               		.stabd	46,0,0
 174:util.c        **** 	int16_t twave;
 385               	.LM35:
 386               	.LFBB6:
 387               	/* prologue: function */
 388               	/* frame size = 0 */
 389               	/* stack size = 0 */
 390               	.L__stack_usage = 0
 182:util.c        **** 	{
 392               	.LM36:
 393 00de 8091 0000 		lds r24,speed
 394 00e2 8111      		cpse r24,__zero_reg__
 395 00e4 00C0      		rjmp .L15
 184:util.c        **** 		wave0 = wave1 = 0;
 397               	.LM37:
 398 00e6 20E0      		ldi r18,lo8(gs(voiceQuicklySleep))
 399 00e8 30E0      		ldi r19,hi8(gs(voiceQuicklySleep))
 400 00ea 3093 0000 		sts voiceptr+1,r19
 401 00ee 2093 0000 		sts voiceptr,r18
 185:util.c        **** 		return 0;
 403               	.LM38:
 404 00f2 1092 0000 		sts wave1.1843,__zero_reg__
 405 00f6 1092 0000 		sts wave0.1842,__zero_reg__
GAS LISTING /tmp/cclTvlN6.s 			page 10


 186:util.c        **** 	}
 407               	.LM39:
 408 00fa 0895      		ret
 409               	.L15:
 189:util.c        **** 	if( up )
 411               	.LM40:
 412 00fc 8091 0000 		lds r24,wave0.1842
 413 0100 082E      		mov __tmp_reg__,r24
 414 0102 000C      		lsl r0
 415 0104 990B      		sbc r25,r25
 190:util.c        **** 	{
 417               	.LM41:
 418 0106 2091 0000 		lds r18,up.1840
 419 010a 2223      		tst r18
 420 010c 01F0      		breq .L17
 192:util.c        **** 		if( twave > speed_rec ) { up = 0; twave = speed_rec - (twave-speed_rec); } //I hope this is right
 422               	.LM42:
 423 010e 2091 0000 		lds r18,speed
 424 0112 820F      		add r24,r18
 425 0114 911D      		adc r25,__zero_reg__
 193:util.c        **** 	}
 427               	.LM43:
 428 0116 2091 0000 		lds r18,speed_rec
 429 011a 30E0      		ldi r19,0
 430 011c 2817      		cp r18,r24
 431 011e 3907      		cpc r19,r25
 432 0120 04F4      		brge .L18
 193:util.c        **** 	}
 434               	.LM44:
 435 0122 1092 0000 		sts up.1840,__zero_reg__
 436 0126 4091 0000 		lds r20,speed_rec
 437 012a 2091 0000 		lds r18,speed_rec
 438 012e 30E0      		ldi r19,0
 439 0130 B901      		movw r22,r18
 440 0132 681B      		sub r22,r24
 441 0134 790B      		sbc r23,r25
 442 0136 CB01      		movw r24,r22
 443 0138 840F      		add r24,r20
 444 013a 911D      		adc r25,__zero_reg__
 445 013c 00C0      		rjmp .L18
 446               	.L17:
 197:util.c        **** 		if( twave < -speed_rec ) { up = 1; twave = -speed_rec - (twave+speed_rec); } //I hope this is rig
 448               	.LM45:
 449 013e 2091 0000 		lds r18,speed
 450 0142 821B      		sub r24,r18
 451 0144 9109      		sbc r25,__zero_reg__
 198:util.c        **** 	}
 453               	.LM46:
 454 0146 2091 0000 		lds r18,speed_rec
 455 014a 30E0      		ldi r19,0
 456 014c 3195      		neg r19
 457 014e 2195      		neg r18
 458 0150 3109      		sbc r19,__zero_reg__
 459 0152 8217      		cp r24,r18
 460 0154 9307      		cpc r25,r19
 461 0156 04F4      		brge .L18
 198:util.c        **** 	}
GAS LISTING /tmp/cclTvlN6.s 			page 11


 463               	.LM47:
 464 0158 21E0      		ldi r18,lo8(1)
 465 015a 2093 0000 		sts up.1840,r18
 466 015e 2091 0000 		lds r18,speed_rec
 467 0162 3091 0000 		lds r19,speed_rec
 468 0166 AC01      		movw r20,r24
 469 0168 430F      		add r20,r19
 470 016a 511D      		adc r21,__zero_reg__
 471 016c 30E0      		ldi r19,0
 472 016e 8827      		clr r24
 473 0170 9927      		clr r25
 474 0172 821B      		sub r24,r18
 475 0174 930B      		sbc r25,r19
 476 0176 841B      		sub r24,r20
 477 0178 950B      		sbc r25,r21
 478               	.L18:
 200:util.c        **** 
 480               	.LM48:
 481 017a E82F      		mov r30,r24
 482 017c 8093 0000 		sts wave0.1842,r24
 202:util.c        **** 	{
 484               	.LM49:
 485 0180 2091 0000 		lds r18,speed1
 486 0184 2223      		tst r18
 487 0186 01F4      		brne .+2
 488 0188 00C0      		rjmp .L19
 204:util.c        **** 		if( up1 )
 490               	.LM50:
 491 018a 2091 0000 		lds r18,wave1.1843
 492 018e 022E      		mov __tmp_reg__,r18
 493 0190 000C      		lsl r0
 494 0192 330B      		sbc r19,r19
 205:util.c        **** 		{
 496               	.LM51:
 497 0194 8091 0000 		lds r24,up1.1841
 498 0198 8823      		tst r24
 499 019a 01F0      		breq .L20
 207:util.c        **** 			if( twave > speed_rec1 ) { up1 = 0; twave = speed_rec1 - (twave-speed_rec1); } //I hope this is 
 501               	.LM52:
 502 019c 8091 0000 		lds r24,speed1
 503 01a0 280F      		add r18,r24
 504 01a2 311D      		adc r19,__zero_reg__
 208:util.c        **** 		}
 506               	.LM53:
 507 01a4 4091 0000 		lds r20,speed_rec1
 508 01a8 50E0      		ldi r21,0
 509 01aa 4217      		cp r20,r18
 510 01ac 5307      		cpc r21,r19
 511 01ae 04F4      		brge .L21
 208:util.c        **** 		}
 513               	.LM54:
 514 01b0 1092 0000 		sts up1.1841,__zero_reg__
 515 01b4 8091 0000 		lds r24,speed_rec1
 516 01b8 4091 0000 		lds r20,speed_rec1
 517 01bc 50E0      		ldi r21,0
 518 01be BA01      		movw r22,r20
 519 01c0 621B      		sub r22,r18
GAS LISTING /tmp/cclTvlN6.s 			page 12


 520 01c2 730B      		sbc r23,r19
 521 01c4 9B01      		movw r18,r22
 522 01c6 280F      		add r18,r24
 523 01c8 311D      		adc r19,__zero_reg__
 524 01ca 00C0      		rjmp .L21
 525               	.L20:
 212:util.c        **** 			if( twave < -speed_rec1 ) { up1 = 1; twave = -speed_rec1 - (twave+speed_rec1); } //I hope this i
 527               	.LM55:
 528 01cc 8091 0000 		lds r24,speed1
 529 01d0 281B      		sub r18,r24
 530 01d2 3109      		sbc r19,__zero_reg__
 213:util.c        **** 		}
 532               	.LM56:
 533 01d4 4091 0000 		lds r20,speed_rec1
 534 01d8 50E0      		ldi r21,0
 535 01da 5195      		neg r21
 536 01dc 4195      		neg r20
 537 01de 5109      		sbc r21,__zero_reg__
 538 01e0 2417      		cp r18,r20
 539 01e2 3507      		cpc r19,r21
 540 01e4 04F4      		brge .L21
 213:util.c        **** 		}
 542               	.LM57:
 543 01e6 81E0      		ldi r24,lo8(1)
 544 01e8 8093 0000 		sts up1.1841,r24
 545 01ec 4091 0000 		lds r20,speed_rec1
 546 01f0 8091 0000 		lds r24,speed_rec1
 547 01f4 B901      		movw r22,r18
 548 01f6 680F      		add r22,r24
 549 01f8 711D      		adc r23,__zero_reg__
 550 01fa 50E0      		ldi r21,0
 551 01fc 2227      		clr r18
 552 01fe 3327      		clr r19
 553 0200 241B      		sub r18,r20
 554 0202 350B      		sbc r19,r21
 555 0204 261B      		sub r18,r22
 556 0206 370B      		sbc r19,r23
 557               	.L21:
 215:util.c        **** 		wave = (wave1+wave0)/2;
 559               	.LM58:
 560 0208 2093 0000 		sts wave1.1843,r18
 216:util.c        **** 		return 1;
 562               	.LM59:
 563 020c 8E2F      		mov r24,r30
 564 020e EE0F      		lsl r30
 565 0210 990B      		sbc r25,r25
 566 0212 820F      		add r24,r18
 567 0214 911D      		adc r25,__zero_reg__
 568 0216 27FD      		sbrc r18,7
 569 0218 9A95      		dec r25
 570 021a 97FD      		sbrc r25,7
 571 021c 0196      		adiw r24,1
 572               	.L22:
 573 021e 9595      		asr r25
 574 0220 8795      		ror r24
 575 0222 8093 0000 		sts wave,r24
 576 0226 00C0      		rjmp .L23
GAS LISTING /tmp/cclTvlN6.s 			page 13


 577               	.L19:
 221:util.c        **** 		wave1 = 0;
 579               	.LM60:
 580 0228 8093 0000 		sts wave,r24
 222:util.c        **** 		return 1;
 582               	.LM61:
 583 022c 1092 0000 		sts wave1.1843,__zero_reg__
 584               	.L23:
 223:util.c        **** 	}
 586               	.LM62:
 587 0230 81E0      		ldi r24,lo8(1)
 225:util.c        **** 
 589               	.LM63:
 590 0232 0895      		ret
 598               	.Lscope6:
 600               		.stabd	78,0,0
 602               	.global	ReadButtonMask
 604               	ReadButtonMask:
 605               		.stabd	46,0,0
 233:util.c        **** 
 234:util.c        **** 
 235:util.c        **** 
 236:util.c        **** uint16_t ReadButtonMask()
 237:util.c        **** {
 607               	.LM64:
 608               	.LFBB7:
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 0 */
 612               	.L__stack_usage = 0
 238:util.c        **** 	uint16_t ret = 0;
 239:util.c        **** 	if( BUTTON0DOWN ) ret |= _BV(0);
 614               	.LM65:
 615 0234 26B1      		in r18,0x6
 616 0236 2295      		swap r18
 617 0238 2695      		lsr r18
 618 023a 2770      		andi r18,lo8(7)
 619 023c 31E0      		ldi r19,lo8(1)
 620 023e 2327      		eor r18,r19
 238:util.c        **** 	uint16_t ret = 0;
 622               	.LM66:
 623 0240 822F      		mov r24,r18
 624 0242 8170      		andi r24,1
 625 0244 90E0      		ldi r25,0
 240:util.c        **** 	if( BUTTON1DOWN ) ret |= _BV(1);
 627               	.LM67:
 628 0246 4A9B      		sbis 0x9,2
 630               	.LM68:
 631 0248 8260      		ori r24,2
 632               	.L26:
 241:util.c        **** 	if( BUTTON2DOWN ) ret |= _BV(2);
 634               	.LM69:
 635 024a 4C9B      		sbis 0x9,4
 637               	.LM70:
 638 024c 8460      		ori r24,4
 639               	.L27:
 242:util.c        **** 	if( BUTTON3DOWN ) ret |= _BV(3);
GAS LISTING /tmp/cclTvlN6.s 			page 14


 641               	.LM71:
 642 024e 619B      		sbis 0xc,1
 644               	.LM72:
 645 0250 8860      		ori r24,8
 646               	.L28:
 243:util.c        **** 	if( BUTTON4DOWN ) ret |= _BV(4);
 648               	.LM73:
 649 0252 4F9B      		sbis 0x9,7
 651               	.LM74:
 652 0254 8061      		ori r24,16
 653               	.L29:
 244:util.c        **** 	if( BUTTON5DOWN ) ret |= _BV(5);
 655               	.LM75:
 656 0256 189B      		sbis 0x3,0
 658               	.LM76:
 659 0258 8062      		ori r24,32
 660               	.L30:
 245:util.c        **** 	if( BUTTON6DOWN ) ret |= _BV(6);
 662               	.LM77:
 663 025a 199B      		sbis 0x3,1
 665               	.LM78:
 666 025c 8064      		ori r24,64
 667               	.L31:
 246:util.c        **** 	if( BUTTON7DOWN ) ret |= _BV(7);
 669               	.LM79:
 670 025e 1C9B      		sbis 0x3,4
 672               	.LM80:
 673 0260 8068      		ori r24,128
 674               	.L32:
 247:util.c        **** 	if( BUTTON8DOWN ) ret |= _BV(8);
 676               	.LM81:
 677 0262 629B      		sbis 0xc,2
 679               	.LM82:
 680 0264 9160      		ori r25,1
 681               	.L33:
 248:util.c        **** 	if( BUTTON9DOWN ) ret |= _BV(9);
 683               	.LM83:
 684 0266 639B      		sbis 0xc,3
 686               	.LM84:
 687 0268 9260      		ori r25,2
 688               	.L34:
 249:util.c        **** 	if( BUTTON10DOWN ) ret |= _BV(10);
 690               	.LM85:
 691 026a 329B      		sbis 0x6,2
 693               	.LM86:
 694 026c 9460      		ori r25,4
 695               	.L35:
 250:util.c        **** 	if( BUTTON11DOWN ) ret |= _BV(11);
 697               	.LM87:
 698 026e 339B      		sbis 0x6,3
 700               	.LM88:
 701 0270 9860      		ori r25,8
 702               	.L36:
 251:util.c        **** 	if( BUTTON12DOWN ) ret |= _BV(12);
 704               	.LM89:
 705 0272 349B      		sbis 0x6,4
 707               	.LM90:
GAS LISTING /tmp/cclTvlN6.s 			page 15


 708 0274 9061      		ori r25,16
 709               	.L37:
 252:util.c        **** 	return ret;
 253:util.c        **** }
 711               	.LM91:
 712 0276 0895      		ret
 717               	.Lscope7:
 719               		.stabd	78,0,0
 720               		.local	up1.1841
 721               		.comm	up1.1841,1,1
 722               		.local	up.1840
 723               		.comm	up.1840,1,1
 724               		.local	wave0.1842
 725               		.comm	wave0.1842,1,1
 726               		.local	wave1.1843
 727               		.comm	wave1.1843,1,1
 728               	.global	lfsr
 729               		.data
 732               	lfsr:
 733 0000 E7        		.byte	-25
 734               		.comm	speed_rec1,1,1
 735               		.comm	speed1,1,1
 736               		.comm	speed_rec,1,1
 737               		.comm	speed,1,1
 738               		.comm	voiceptr,2,1
 739               		.comm	wave,1,1
 740               	.global	freq_rs
 743               	freq_rs:
 744 0001 77        		.byte	119
 745 0002 71        		.byte	113
 746 0003 6A        		.byte	106
 747 0004 64        		.byte	100
 748 0005 5F        		.byte	95
 749 0006 59        		.byte	89
 750 0007 54        		.byte	84
 751 0008 50        		.byte	80
 752 0009 4B        		.byte	75
 753 000a 47        		.byte	71
 754 000b 43        		.byte	67
 755 000c 40        		.byte	64
 756 000d 77        		.byte	119
 757 000e 71        		.byte	113
 758 000f 6A        		.byte	106
 759 0010 64        		.byte	100
 760 0011 5F        		.byte	95
 761 0012 59        		.byte	89
 762 0013 54        		.byte	84
 763 0014 50        		.byte	80
 764 0015 71        		.byte	113
 765 0016 47        		.byte	71
 766 0017 43        		.byte	67
 767 0018 5F        		.byte	95
 768 0019 77        		.byte	119
 769 001a 71        		.byte	113
 770 001b 50        		.byte	80
 771 001c 4B        		.byte	75
 772 001d 47        		.byte	71
GAS LISTING /tmp/cclTvlN6.s 			page 16


 773 001e 70        		.byte	112
 774 001f 6A        		.byte	106
 775 0020 50        		.byte	80
 776 0021 5E        		.byte	94
 777 0022 47        		.byte	71
 778 0023 43        		.byte	67
 779 0024 5F        		.byte	95
 780 0025 77        		.byte	119
 781 0026 71        		.byte	113
 782 0027 5D        		.byte	93
 783 0028 71        		.byte	113
 784 0029 53        		.byte	83
 785 002a 7B        		.byte	123
 786 002b 5F        		.byte	95
 787 002c 46        		.byte	70
 788 002d 5E        		.byte	94
 789 002e 47        		.byte	71
 790 002f 43        		.byte	67
 791 0030 57        		.byte	87
 792 0031 70        		.byte	112
 793 0032 78        		.byte	120
 794 0033 71        		.byte	113
 795 0034 71        		.byte	113
 796 0035 4D        		.byte	77
 797 0036 7B        		.byte	123
 798 0037 5F        		.byte	95
 799 0038 41        		.byte	65
 800 0039 50        		.byte	80
 801 003a 6F        		.byte	111
 802 003b 58        		.byte	88
 803 003c 57        		.byte	87
 804               	.global	freq_s
 807               	freq_s:
 808 003d 01        		.byte	1
 809 003e 01        		.byte	1
 810 003f 01        		.byte	1
 811 0040 01        		.byte	1
 812 0041 01        		.byte	1
 813 0042 01        		.byte	1
 814 0043 01        		.byte	1
 815 0044 01        		.byte	1
 816 0045 01        		.byte	1
 817 0046 01        		.byte	1
 818 0047 01        		.byte	1
 819 0048 01        		.byte	1
 820 0049 02        		.byte	2
 821 004a 02        		.byte	2
 822 004b 02        		.byte	2
 823 004c 02        		.byte	2
 824 004d 02        		.byte	2
 825 004e 02        		.byte	2
 826 004f 02        		.byte	2
 827 0050 02        		.byte	2
 828 0051 03        		.byte	3
 829 0052 02        		.byte	2
 830 0053 02        		.byte	2
 831 0054 03        		.byte	3
GAS LISTING /tmp/cclTvlN6.s 			page 17


 832 0055 04        		.byte	4
 833 0056 04        		.byte	4
 834 0057 03        		.byte	3
 835 0058 03        		.byte	3
 836 0059 03        		.byte	3
 837 005a 05        		.byte	5
 838 005b 05        		.byte	5
 839 005c 04        		.byte	4
 840 005d 05        		.byte	5
 841 005e 04        		.byte	4
 842 005f 04        		.byte	4
 843 0060 06        		.byte	6
 844 0061 08        		.byte	8
 845 0062 08        		.byte	8
 846 0063 07        		.byte	7
 847 0064 09        		.byte	9
 848 0065 07        		.byte	7
 849 0066 0B        		.byte	11
 850 0067 09        		.byte	9
 851 0068 07        		.byte	7
 852 0069 0A        		.byte	10
 853 006a 08        		.byte	8
 854 006b 08        		.byte	8
 855 006c 0B        		.byte	11
 856 006d 0F        		.byte	15
 857 006e 11        		.byte	17
 858 006f 11        		.byte	17
 859 0070 12        		.byte	18
 860 0071 0D        		.byte	13
 861 0072 16        		.byte	22
 862 0073 12        		.byte	18
 863 0074 0D        		.byte	13
 864 0075 11        		.byte	17
 865 0076 19        		.byte	25
 866 0077 15        		.byte	21
 867 0078 16        		.byte	22
 877               		.text
 879               	.Letext0:
 880               		.ident	"GCC: (GNU) 4.9.2"
 881               	.global __do_copy_data
 882               	.global __do_clear_bss
GAS LISTING /tmp/cclTvlN6.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 util.c
     /tmp/cclTvlN6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclTvlN6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclTvlN6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclTvlN6.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclTvlN6.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclTvlN6.s:112    .text:0000000000000000 voiceQuicklySleep
     /tmp/cclTvlN6.s:132    .text:0000000000000004 GetRandom
     /tmp/cclTvlN6.s:732    .data:0000000000000000 lfsr
     /tmp/cclTvlN6.s:175    .text:0000000000000032 __vector_14
     /tmp/cclTvlN6.s:201    .text:0000000000000034 __vector_16
     /tmp/cclTvlN6.s:225    .text:0000000000000046 intcont
     /tmp/cclTvlN6.s:222    .text:0000000000000042 make_zero
                            *COM*:0000000000000002 voiceptr
                            *COM*:0000000000000001 wave
     /tmp/cclTvlN6.s:357    .text:00000000000000d0 voicePlayWave
     /tmp/cclTvlN6.s:382    .text:00000000000000de voiceDoBasicSynth
                            *COM*:0000000000000001 speed
     /tmp/cclTvlN6.s:725    .bss:0000000000000003 wave1.1843
     /tmp/cclTvlN6.s:723    .bss:0000000000000002 wave0.1842
     /tmp/cclTvlN6.s:721    .bss:0000000000000001 up.1840
                            *COM*:0000000000000001 speed_rec
                            *COM*:0000000000000001 speed1
                             .bss:0000000000000000 up1.1841
                            *COM*:0000000000000001 speed_rec1
     /tmp/cclTvlN6.s:604    .text:0000000000000234 ReadButtonMask
     /tmp/cclTvlN6.s:743    .data:0000000000000001 freq_rs
     /tmp/cclTvlN6.s:807    .data:000000000000003d freq_s

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
